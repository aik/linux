# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
# 1 "<built-in>" 1
# 514 "<built-in>"
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler-version.h" 1
# 515 "<built-in>" 2
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/linux/kconfig.h" 2
# 516 "<built-in>" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 21 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/threads.h" 1
# 22 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/init.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler_types.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler.h" 2
# 266 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler.h"
# 1 "./arch/powerpc/include/generated/asm/rwonce.h" 1
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/rwonce.h" 1
# 2 "./arch/powerpc/include/generated/asm/rwonce.h" 2
# 267 "/home/aik/p/kernels-llvm/llvm/include/linux/compiler.h" 2
# 6 "/home/aik/p/kernels-llvm/llvm/include/linux/init.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/types.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/linux/types.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/types.h" 1
# 12 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/types.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/types.h" 1
# 28 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/types.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/int-ll64.h" 1
# 11 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/int-ll64.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/int-ll64.h" 1
# 12 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/int-ll64.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/bitsperlong.h" 1
# 11 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/bitsperlong.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/bitsperlong.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/bitsperlong.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/bitsperlong.h" 2
# 12 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/bitsperlong.h" 2
# 13 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/int-ll64.h" 2
# 12 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/int-ll64.h" 2
# 29 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/types.h" 2
# 13 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/types.h" 2
# 6 "/home/aik/p/kernels-llvm/llvm/include/uapi/linux/types.h" 2
# 7 "/home/aik/p/kernels-llvm/llvm/include/linux/types.h" 2
# 7 "/home/aik/p/kernels-llvm/llvm/include/linux/init.h" 2
# 23 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 1
# 14 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/stringify.h" 1
# 15 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/const.h" 1



# 1 "/home/aik/p/kernels-llvm/llvm/include/vdso/const.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/linux/const.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/vdso/const.h" 2
# 5 "/home/aik/p/kernels-llvm/llvm/include/linux/const.h" 2
# 16 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cputable.h" 1






# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/cputable.h" 1
# 8 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cputable.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-const.h" 1
# 9 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cputable.h" 2
# 17 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 2

# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/feature-fixups.h" 1
# 19 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 2
# 29 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg_8xx.h" 1
# 30 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/reg.h" 2
# 24 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page.h" 1
# 247 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page_64.h" 1
# 104 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page_64.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/getorder.h" 1
# 105 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page_64.h" 2
# 248 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page.h" 2
# 332 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/slice.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/slice.h" 1
# 7 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/slice.h" 2
# 333 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/page.h" 2
# 25 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/mmu.h" 1
# 395 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/mmu.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu.h" 1
# 32 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h" 1
# 12 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-compat.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ppc-opcode.h" 1
# 7 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-compat.h" 2
# 7 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/extable.h" 1
# 8 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h" 2




# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-offsets.h" 1
# 1 "./include/generated/asm-offsets.h" 1
# 2 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-offsets.h" 2
# 13 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h" 2

.macro EMIT_BUG_ENTRY addr,file,line,flags
  .section __bug_table,"aw"
5001: .4byte \addr - 5001b, 5002f - 5001b
  .short \line, \flags
  .org 5001b+12
  .previous
  .section .rodata,"a"
5002: .asciz "\file"
  .previous
.endm
# 34 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h"
.macro EMIT_WARN_ENTRY addr,file,line,flags
 .section __ex_table,"a"; .balign 4; .long (\addr) - . ; .long (\addr+4) - . ; .previous
 EMIT_BUG_ENTRY \addr,\file,\line,\flags
.endm
# 149 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/bug.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/instrumentation.h" 1
# 7 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/bug.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/once_lite.h" 1
# 8 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/bug.h" 2
# 150 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/bug.h" 2
# 13 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2







# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/pgtable-nop4d.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 299 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/hash.h" 1
# 16 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/hash.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/hash-64k.h" 1
# 17 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/hash.h" 2
# 300 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/radix.h" 1
# 12 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/radix.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/radix-64k.h" 1
# 13 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/radix.h" 2
# 301 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 310 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable-64k.h" 1
# 311 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 2




# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/barrier.h" 1
# 115 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/barrier.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/barrier.h" 1
# 116 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/barrier.h" 2
# 316 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 21 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/task_size_64.h" 1
# 22 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cpu_has_feature.h" 1
# 23 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2
# 33 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/mmu.h" 2
# 396 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/mmu.h" 2
# 26 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ppc_asm.h" 1








# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/processor.h" 1








# 1 "/home/aik/p/kernels-llvm/llvm/include/vdso/processor.h" 1
# 10 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/processor.h" 2
# 10 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ppc_asm.h" 2

# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/firmware.h" 1
# 12 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ppc_asm.h" 2
# 274 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ppc_asm.h"
.macro __LOAD_REG_IMMEDIATE_32 r, x
 .if (\x) >= 0x8000 || (\x) < -0x8000
  lis \r, (\x)@high
  .if (\x) & 0xffff != 0
   ori \r, \r, (\x)@l
  .endif
 .else
  li \r, (\x)@l
 .endif
.endm

.macro __LOAD_REG_IMMEDIATE r, x
 .if (\x) >= 0x80000000 || (\x) < -0x80000000
  __LOAD_REG_IMMEDIATE_32 \r, (\x) >> 32
  sldi \r, \r, 32
  .if (\x) & 0xffff0000 != 0
   oris \r, \r, (\x)@high
  .endif
  .if (\x) & 0xffff != 0
   ori \r, \r, (\x)@l
  .endif
 .else
  __LOAD_REG_IMMEDIATE_32 \r, \x
 .endif
.endm
# 27 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/head-64.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cache.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/head-64.h" 2






.macro define_ftsec name
 .section ".head.text.\name\()","ax",@progbits
.endm
.macro define_data_ftsec name
 .section ".head.data.\name\()","a",@progbits
.endm
# 28 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-offsets.h" 1
# 29 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2


# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/setup.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/setup.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/setup.h" 2
# 32 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/hvcall.h" 1
# 33 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/thread_info.h" 1
# 34 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2


# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/irqflags.h" 1
# 37 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kvm_book3s_asm.h" 1
# 30 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kvm_book3s_asm.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kvm_asm.h" 1
# 31 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kvm_book3s_asm.h" 2

.macro DO_KVM intno
 .if (\intno == 0x100) || (\intno == 0x200) || (\intno == 0x300) || (\intno == 0x400) || (\intno == 0x380) || (\intno == 0x480) || (\intno == 0x500) || (\intno == 0x502) || (\intno == 0x600) || (\intno == 0x700) || (\intno == 0x800) || (\intno == 0x900) || (\intno == 0xc00) || (\intno == 0xd00) || (\intno == 0xf00) || (\intno == 0xf20) || (\intno == 0xf40)
# 51 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kvm_book3s_asm.h"
 b kvmppc_trampoline_\intno
kvmppc_resume_\intno:

 .endif
.endm
# 38 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ptrace.h" 1
# 22 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ptrace.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/err.h" 1







# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/errno.h" 1





# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/errno.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/errno-base.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/uapi/asm-generic/errno.h" 2
# 7 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/errno.h" 2
# 9 "/home/aik/p/kernels-llvm/llvm/include/linux/err.h" 2
# 23 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ptrace.h" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/uapi/asm/ptrace.h" 1
# 24 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/ptrace.h" 2
# 39 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/hw_irq.h" 1
# 10 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/hw_irq.h"
# 1 "/home/aik/p/kernels-llvm/llvm/include/linux/errno.h" 1




# 1 "/home/aik/p/kernels-llvm/llvm/include/uapi/linux/errno.h" 1
# 6 "/home/aik/p/kernels-llvm/llvm/include/linux/errno.h" 2
# 11 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/hw_irq.h" 2
# 40 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cputhreads.h" 1
# 41 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2

# 1 "./arch/powerpc/include/generated/asm/export.h" 1
# 1 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/export.h" 1
# 19 "/home/aik/p/kernels-llvm/llvm/include/asm-generic/export.h"
.macro __put, val, name



 .quad \val, \name, 0



.endm







.macro ___EXPORT_SYMBOL name,val,sec

 .section ___ksymtab\sec+\name,"a"
 .balign 8
__ksymtab_\name:
 __put \val, __kstrtab_\name
 .previous
 .section __ksymtab_strings,"aMS",%progbits,1
__kstrtab_\name:
 .asciz "\name"
 .previous

 .section ___kcrctab\sec+\name,"a"
 .balign 4

 .long __crc_\name - .



 .weak __crc_\name
 .previous


.endm
# 2 "./arch/powerpc/include/generated/asm/export.h" 2
# 43 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2


# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/exception-64s.h" 1
# 46 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 78 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
first_256B_start = (0x0); first_256B_end = (0x100); first_256B_len = (0x100) - (0x0); define_ftsec first_256B; . = 0x0; start_first_256B:
define_ftsec first_256B;





 . = 0x0
.align 2 ; .type __start,@function; .globl __start; __start:

971:
 tdi 0,0,0x48; b 191f; .long 0xa600607d; .long 0x01006b69; .long 0x00004039; .long 0x6401417d; .long 0x05009f42; .long 0xa602487d; .long 0x14004a39; .long 0xa6035a7d; .long 0xa6037b7d; .long 0x2400004c; 191:
 b __start_initialization_multiplatform
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0; .8byte 1; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;


 trap





 .balign 8
 .globl __secondary_hold_spinloop
__secondary_hold_spinloop:
 .8byte 0x0



 .globl __secondary_hold_acknowledge
__secondary_hold_acknowledge:
 .8byte 0x0
# 126 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 . = 0x5c
 .globl __run_at_load
__run_at_load:
__run_at_load_absolute = (__run_at_load - start_first_256B + first_256B_start)
 .long 0x72756e30


 . = 0x60
# 143 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 .globl __secondary_hold
__secondary_hold:
 tdi 0,0,0x48; b 191f; .long 0xa600607d; .long 0x01006b69; .long 0x00004039; .long 0x6401417d; .long 0x05009f42; .long 0xa602487d; .long 0x14004a39; .long 0xa6035a7d; .long 0xa6037b7d; .long 0x2400004c; 191:

 mfmsr %r24
 ori %r24,%r24,(1<<(1))
 mtmsrd %r24


 mr %r24,%r3

 mr %r25,%r4




 std %r24,((__secondary_hold_acknowledge - start_first_256B + first_256B_start))(0)
 sync

 li %r26,0




100: ld %r12,((__secondary_hold_spinloop - start_first_256B + first_256B_start))(%r26)
 cmpdi 0,%r12,0
 beq 100b





 mtctr %r12
 mr %r3,%r24







 li %r4,0


 isync
 bctr




define_ftsec first_256B;; . = first_256B_len; end_first_256B:


 .section ".toc","aw"

exception_marker:
 .tc ID_EXC_MARKER[TC],0x7265677368657265
 .previous







# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S" 1
# 19 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/cpuidle.h" 1
# 20 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S" 2


# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kup.h" 1
# 10 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kup.h"
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/kup.h" 1
# 15 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/kup.h"
.macro kuap_user_restore gpr1, gpr2

 671:
 b 100f
 672: .pushsection __ftr_alt_67,"a"; .align 2; 673: 674: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 675: .8byte (0x00000800); .8byte 0; .8byte 671b -675b; .8byte 672b -675b; .8byte 673b -675b; .8byte 674b -675b; .org . + (((674b -673b)) > ((672b -671b)));; .popsection;




 ld \gpr1, 480(%r1)





 681:
 mfspr \gpr2, 0x1d
 cmpd \gpr1, \gpr2
 beq 99f
 682: .pushsection __ftr_alt_68,"a"; .align 2; 683: 684: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 685: .8byte (0x00000200); .8byte 0; .8byte 681b -685b; .8byte 682b -685b; .8byte 683b -685b; .8byte 684b -685b; .org . + (((684b -683b)) > ((682b -681b)));; .popsection;

 isync
 mtspr 0x1d, \gpr1
99:



 ld \gpr1, 488(%r1)





 691:
 mfspr \gpr2, 0x03D
 cmpd \gpr1, \gpr2
 beq 100f
 692: .pushsection __ftr_alt_69,"a"; .align 2; 693: 694: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 695: .8byte (0x00000400); .8byte 0; .8byte 691b -695b; .8byte 692b -695b; .8byte 693b -695b; .8byte 694b -695b; .org . + (((694b -693b)) > ((692b -691b)));; .popsection;

 isync
 mtspr 0x03D, \gpr1

100:


.endm

.macro kuap_kernel_restore gpr1, gpr2


 671:




 ld \gpr2, 480(%r1)
 mfspr \gpr1, 0x1d
 cmpd \gpr1, \gpr2
 beq 100f
 isync
 mtspr 0x1d, \gpr2




100:
 672: .pushsection __ftr_alt_67,"a"; .align 2; 673: 674: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 675: .8byte (0x00000200); .8byte (0x00000200); .8byte 671b -675b; .8byte 672b -675b; .8byte 673b -675b; .8byte 674b -675b; .org . + (((674b -673b)) > ((672b -671b)));; .popsection;

.endm


.macro kuap_check_amr gpr1, gpr2
# 96 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/kup.h"
.endm
# 125 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/book3s/64/kup.h"
.macro kuap_save_amr_and_lock gpr1, gpr2, use_cr, msr_pr_cr





 681:
 b 100f
 682: .pushsection __ftr_alt_68,"a"; .align 2; 683: 684: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 685: .8byte (0x00000800 | 0x00000200); .8byte 0; .8byte 681b -685b; .8byte 682b -685b; .8byte 683b -685b; .8byte 684b -685b; .org . + (((684b -683b)) > ((682b -681b)));; .popsection;





 671:
 .ifnb \msr_pr_cr




 bne \msr_pr_cr, 100f
 .endif
        672: .pushsection __ftr_alt_67,"a"; .align 2; 673: 674: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 675: .8byte (0x00000800); .8byte 0; .8byte 671b -675b; .8byte 672b -675b; .8byte 673b -675b; .8byte 674b -675b; .org . + (((674b -673b)) > ((672b -671b)));; .popsection;




 mfspr \gpr1, 0x1d
 std \gpr1, 480(%r1)





 691:
 __LOAD_REG_IMMEDIATE \gpr2, (((0x5455555555555555)) | ((0xa8aaaaaaaaaaaaaa)))
 cmpd \use_cr, \gpr1, \gpr2
 beq \use_cr, 102f



 mtspr 0x1d, \gpr2
 isync
102:
 692: .pushsection __ftr_alt_69,"a"; .align 2; 693: 694: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 695: .8byte (0x00000200); .8byte (0x00000200); .8byte 691b -695b; .8byte 692b -695b; .8byte 693b -695b; .8byte 694b -695b; .org . + (((694b -693b)) > ((692b -691b)));; .popsection;




 .ifnb \msr_pr_cr
 beq \msr_pr_cr, 100f
 mfspr \gpr1, 0x03D
 std \gpr1, 488(%r1)





 701:
 __LOAD_REG_IMMEDIATE \gpr2, ((0x5455555555555555))
 mtspr 0x03D, \gpr2
 isync
 702: .pushsection __ftr_alt_70,"a"; .align 2; 703: 704: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 705: .8byte (0x00000400); .8byte (0x00000400); .8byte 701b -705b; .8byte 702b -705b; .8byte 703b -705b; .8byte 704b -705b; .org . + (((704b -703b)) > ((702b -701b)));; .popsection;
 .endif

100:

.endm
# 11 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/kup.h" 2
# 23 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S" 2
# 122 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro do_define_int name
 .ifndef .L_IVEC_\name\()
  .error "IVEC not defined"
 .endif
 .ifndef .L_IHSRR_\name\()
  .L_IHSRR_\name\()=0
 .endif
 .ifndef .L_IHSRR_IF_HVMODE_\name\()
  .L_IHSRR_IF_HVMODE_\name\()=0
 .endif
 .ifndef .L_IAREA_\name\()
  .L_IAREA_\name\()=128
 .endif
 .ifndef .L_IVIRT_\name\()
  .L_IVIRT_\name\()=1
 .endif
 .ifndef .L_IISIDE_\name\()
  .L_IISIDE_\name\()=0
 .endif
 .ifndef .L_IDAR_\name\()
  .L_IDAR_\name\()=0
 .endif
 .ifndef .L_IDSISR_\name\()
  .L_IDSISR_\name\()=0
 .endif
 .ifndef .L_ISET_RI_\name\()
  .L_ISET_RI_\name\()=1
 .endif
 .ifndef .L_IBRANCH_TO_COMMON_\name\()
  .L_IBRANCH_TO_COMMON_\name\()=1
 .endif
 .ifndef .L_IREALMODE_COMMON_\name\()
  .L_IREALMODE_COMMON_\name\()=0
 .else
  .if ! .L_IBRANCH_TO_COMMON_\name\()
   .error "IREALMODE_COMMON=1 but IBRANCH_TO_COMMON=0"
  .endif
 .endif
 .ifndef .L_IMASK_\name\()
  .L_IMASK_\name\()=0
 .endif
 .ifndef .L_IKVM_REAL_\name\()
  .L_IKVM_REAL_\name\()=0
 .endif
 .ifndef .L_IKVM_VIRT_\name\()
  .L_IKVM_VIRT_\name\()=0
 .endif
 .ifndef .L_ISTACK_\name\()
  .L_ISTACK_\name\()=1
 .endif
 .ifndef .L_IKUAP_\name\()
  .L_IKUAP_\name\()=1
 .endif
.endm
# 209 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro KVMTEST name handler

 lbz %r10,2760(%r13)
 cmpwi %r10,0

 .if .L_IHSRR_IF_HVMODE_\name\()
 971:
 li %r10,(.L_IVEC_\name\() + 0x2)
 972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 li %r10,(.L_IVEC_\name\())
 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 .elseif .L_IHSRR_\name\()
 li %r10,(.L_IVEC_\name\() + 0x2)
 .else
 li %r10,(.L_IVEC_\name\())
 .endif
 bne \handler

.endm
# 250 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro GEN_BRANCH_TO_COMMON name, virt
 .if .L_IREALMODE_COMMON_\name\()
 ld %r10,24(%r13); ori %r10,%r10,(\name\()_common_absolute)
 mtctr %r10
 bctr
 .else
 .if \virt



 ld %r10,24(%r13); ori %r10,%r10,(\name\()_common_virt_absolute)
 mtctr %r10
 bctr

 .else
 ld %r10,24(%r13); ori %r10,%r10,(\name\()_common_real_absolute)
 mtctr %r10
 bctr
 .endif
 .endif
.endm

.macro GEN_INT_ENTRY name, virt, ool=0
 661:; mtspr 0x112,%r13; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mtspr 0x131,%r13; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 std %r9,.L_IAREA_\name\()+0(%r13)
971:
 mfspr %r9,0x380
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 or 2,2,2
 std %r10,.L_IAREA_\name\()+8(%r13)
971:
 mfspr %r10,0x1c
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000002000000000); .8byte (0x0000002000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 .if \ool
 .if !\virt
 b tramp_real_\name
 .pushsection .text
 define_ftsec real_trampolines;; .balign (1 << 4); .global tramp_real_\name; tramp_real_\name:
 .else
 b tramp_virt_\name
 .pushsection .text
 define_ftsec virt_trampolines;; .balign (1 << 4); .global tramp_virt_\name; tramp_virt_\name:
 .endif
 .endif

971:
 std %r9,.L_IAREA_\name\()+64(%r13)
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
971:
 std %r10,.L_IAREA_\name\()+56(%r13)
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000002000000000); .8byte (0x0000002000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 953: .pushsection __stf_entry_barrier_fixup,"a"; .align 2; 954: .8byte 953b-954b; .popsection;; nop; nop; nop; 957: .pushsection __entry_flush_fixup,"a"; .align 2; 958: .8byte 957b-958b; .popsection;; nop; nop; nop;
 mfctr %r10
 std %r10,.L_IAREA_\name\()+72(%r13)
 mfcr %r9
 std %r11,.L_IAREA_\name\()+16(%r13)
 std %r12,.L_IAREA_\name\()+24(%r13)






 661:; mfspr %r10,0x112; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r10,0x131; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 std %r10,.L_IAREA_\name\()+32(%r13)
 .if .L_IDAR_\name\() && !.L_IISIDE_\name\()
 .if .L_IHSRR_\name\()
 mfspr %r10,0x133
 .else
 mfspr %r10,0x013
 .endif
 std %r10,.L_IAREA_\name\()+40(%r13)
 .endif
 .if .L_IDSISR_\name\() && !.L_IISIDE_\name\()
 .if .L_IHSRR_\name\()
 mfspr %r10,0x132
 .else
 mfspr %r10,0x012
 .endif
 stw %r10,.L_IAREA_\name\()+48(%r13)
 .endif

 .if .L_IHSRR_IF_HVMODE_\name\()
 971:
 mfspr %r11,0x13A
 mfspr %r12,0x13B
 972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 mfspr %r11,0x01A
 mfspr %r12,0x01B
 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 .elseif .L_IHSRR_\name\()
 mfspr %r11,0x13A
 mfspr %r12,0x13B
 .else
 mfspr %r11,0x01A
 mfspr %r12,0x01B
 .endif

 .if .L_IBRANCH_TO_COMMON_\name\()
 GEN_BRANCH_TO_COMMON \name \virt
 .endif

 .if \ool
 .popsection
 .endif
.endm
# 365 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro __GEN_COMMON_ENTRY name
\name\()_common_real_absolute = (\name\()_common_real - start_text + text_start)
\name\()_common_real:
 .if .L_IKVM_REAL_\name\()
  KVMTEST \name kvm_interrupt
 .endif

 ld %r10,32(%r13)

 .if .L_IHSRR_IF_HVMODE_\name\()
 971:
 xori %r10,%r10,(1<<(1))
 972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000002000); .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 .elseif ! .L_IHSRR_\name\()
 xori %r10,%r10,(1<<(1))
 .endif
 mtmsrd %r10

 .if .L_IVIRT_\name\()
 .if .L_IKVM_VIRT_\name\()
 b 1f
 .endif

 .balign (1 << 4)
\name\()_common_virt_absolute = (\name\()_common_virt - start_text + text_start)
\name\()_common_virt:
 .if .L_IKVM_VIRT_\name\()
  KVMTEST \name kvm_interrupt
1:
 .endif
 .endif
.endm





.macro __GEN_REALMODE_COMMON_ENTRY name
\name\()_common_real_absolute = (\name\()_common_real - start_text + text_start)
\name\()_common_real:
 .if .L_IKVM_REAL_\name\()
  KVMTEST \name kvm_interrupt
 .endif
.endm

.macro __GEN_COMMON_BODY name
 .if .L_IMASK_\name\()
  .if ! .L_ISTACK_\name\()
  .error "No support for masked interrupt to use custom stack"
  .endif


  andi. %r10,%r12,(1<<(14))
  bne 3f






  ld %r10,24(%r13); ori %r10,%r10,(__end_soft_masked_absolute)
  cmpld %r11,%r10
  bge+ 1f


  mtctr %r12
  stw %r9,128 +52(%r13)
  SEARCH_SOFT_MASK_TABLE
  cmpdi %r12,0
  mfctr %r12
  lwz %r9,128 +52(%r13)
  beq 1f
  li %r10,.L_IMASK_\name\()
  b 2f


1: lbz %r10,2354(%r13)
2: andi. %r10,%r10,.L_IMASK_\name\()

  .if .L_IVEC_\name\() == 0x500 || .L_IVEC_\name\() == 0xea0
  li %r10,0x04
  .elseif .L_IVEC_\name\() == 0x900
  li %r10,0x08
  .elseif .L_IVEC_\name\() == 0xa00 || .L_IVEC_\name\() == 0xe80
  li %r10,0x02
  .elseif .L_IVEC_\name\() == 0xe60
  li %r10,0x10
  .elseif .L_IVEC_\name\() == 0xf00
  li %r10,0x20
  .else
  .abort "Bad maskable vector"
  .endif

  .if .L_IHSRR_IF_HVMODE_\name\()
  971:
  bne masked_Hinterrupt
  972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
  bne masked_interrupt
  974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
  .elseif .L_IHSRR_\name\()
  bne masked_Hinterrupt
  .else
  bne masked_interrupt
  .endif
 .endif

 .if .L_ISTACK_\name\()
 andi. %r10,%r12,(1<<(14))
3: mr %r10,%r1
 subi %r1,%r1,784
 beq- 100f
 ld %r1,2320(%r13)
100: tdgei %r1,-784
 EMIT_BUG_ENTRY 100b,"arch/powerpc/kernel/exceptions-64s.S",478,0
 .endif

 std %r9,416(%r1)
 std %r11,368(%r1)
 std %r12,376(%r1)
 std %r10,0(%r1)
 std %r0,112(%r1)
 std %r10,120(%r1)


 li %r10,1
 .if .L_IHSRR_IF_HVMODE_\name\()
 971:
 stb %r10,2352(%r13)
 972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 stb %r10,2353(%r13)
 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 .elseif .L_IHSRR_\name\()
 stb %r10,2352(%r13)
 .else
 stb %r10,2353(%r13)
 .endif

 .if .L_ISET_RI_\name\()
 li %r10,(1<<(1))
 mtmsrd %r10,1
 .endif

 .if .L_ISTACK_\name\()
 .if .L_IKUAP_\name\()
 kuap_save_amr_and_lock %r9, %r10, 1, 0
 .endif
 beq 101f
971:
 ld %r9,.L_IAREA_\name\()+64(%r13)
 std %r9,464(%r1)
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
101:
 .else
 .if .L_IKUAP_\name\()
 kuap_save_amr_and_lock %r9, %r10, 1
 .endif
 .endif


 ld %r9,.L_IAREA_\name\()+0(%r13)
 ld %r10,.L_IAREA_\name\()+8(%r13)
 std %r9,184(%r1)
 std %r10,192(%r1)
 ld %r9,.L_IAREA_\name\()+16(%r13)
 ld %r10,.L_IAREA_\name\()+24(%r13)
 ld %r11,.L_IAREA_\name\()+32(%r13)
 std %r9,200(%r1)
 std %r10,208(%r1)
 std %r11,216(%r1)

 std 14,112 +8*(14)(%r1); std 14 +1,112 +8*(14 +1)(%r1); std 14 +2,112 +8*(14 +2)(%r1); std 14 +2 +1,112 +8*(14 +2 +1)(%r1); std 14 +4,112 +8*(14 +4)(%r1); std 14 +4 +1,112 +8*(14 +4 +1)(%r1); std 14 +4 +2,112 +8*(14 +4 +2)(%r1); std 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); std 22,112 +8*(22)(%r1); std 22 +1,112 +8*(22 +1)(%r1); std 22 +2,112 +8*(22 +2)(%r1); std 22 +2 +1,112 +8*(22 +2 +1)(%r1); std 22 +4,112 +8*(22 +4)(%r1); std 22 +4 +1,112 +8*(22 +4 +1)(%r1); std 22 +4 +2,112 +8*(22 +4 +2)(%r1); std 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); std 22 +8,112 +8*(22 +8)(%r1); std 22 +8 +1,112 +8*(22 +8 +1)(%r1)

 .if .L_IDAR_\name\()
 .if .L_IISIDE_\name\()
 ld %r10,368(%r1)
 .else
 ld %r10,.L_IAREA_\name\()+40(%r13)
 .endif
 std %r10,440(%r1)
 .endif

 .if .L_IDSISR_\name\()
 .if .L_IISIDE_\name\()
 ld %r10,376(%r1)
 lis %r11,((0x40000000 | 0x10000000 | 0x08000000) | 0x00200000 | 0x00080000 | 0x00040000 | 0x00020000)@h
 and %r10,%r10,%r11
 .else
 lwz %r10,.L_IAREA_\name\()+48(%r13)
 .endif
 std %r10,448(%r1)
 .endif

971:
 ld %r10,.L_IAREA_\name\()+56(%r13)
 std %r10,384(%r1)
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000002000000000); .8byte (0x0000002000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 ld %r10,.L_IAREA_\name\()+72(%r13)
 std %r10,392(%r1)
 std %r2,128(%r1)
 std 3,112 +8*(3)(%r1); std 3 +1,112 +8*(3 +1)(%r1); std 3 +2,112 +8*(3 +2)(%r1); std 3 +2 +1,112 +8*(3 +2 +1)(%r1)
 std 7,112 +8*(7)(%r1); std 7 +1,112 +8*(7 +1)(%r1)
 mflr %r9
 ld %r2,16(%r13)
 std %r9,400(%r1)
 lbz %r10,2354(%r13)
 mfspr %r11,0x001
 std %r10,424(%r1)
 std %r11,408(%r1)
 li %r9,.L_IVEC_\name\()
 std %r9,432(%r1)
 li %r10,0
 ld %r11,exception_marker@toc(%r2)
 std %r10,456(%r1)
 std %r11,112 -16(%r1)
.endm
# 589 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro GEN_COMMON name
 __GEN_COMMON_ENTRY \name
 __GEN_COMMON_BODY \name
.endm

.macro SEARCH_RESTART_TABLE

 mr %r12,%r2
 ld %r2,16(%r13)
 ld %r9,__start___restart_table@got(%r2)
 ld %r10,__stop___restart_table@got(%r2)
 mr %r2,%r12




300:
 cmpd %r9,%r10
 beq 302f
 ld %r12,0(%r9)
 cmpld %r11,%r12
 blt 301f
 ld %r12,8(%r9)
 cmpld %r11,%r12
 bge 301f
 ld %r12,16(%r9)
 b 303f
301:
 addi %r9,%r9,24
 b 300b
302:
 li %r12,0
303:
.endm

.macro SEARCH_SOFT_MASK_TABLE

 mr %r12,%r2
 ld %r2,16(%r13)
 ld %r9,__start___soft_mask_table@got(%r2)
 ld %r10,__stop___soft_mask_table@got(%r2)
 mr %r2,%r12




300:
 cmpd %r9,%r10
 beq 302f
 ld %r12,0(%r9)
 cmpld %r11,%r12
 blt 301f
 ld %r12,8(%r9)
 cmpld %r11,%r12
 bge 301f
 li %r12,1
 b 303f
301:
 addi %r9,%r9,16
 b 300b
302:
 li %r12,0
303:
.endm





.macro EXCEPTION_RESTORE_REGS hsrr=0

 ld %r9,376(%r1)
 li %r10,0
 .if \hsrr
 mtspr 0x13B,%r9
 stb %r10,2352(%r13)
 .else
 mtspr 0x01B,%r9
 stb %r10,2353(%r13)
 .endif
 ld %r9,368(%r1)
 .if \hsrr
 mtspr 0x13A,%r9
 .else
 mtspr 0x01A,%r9
 .endif
 ld %r9,392(%r1)
 mtctr %r9
 ld %r9,408(%r1)
 mtxer %r9
 ld %r9,400(%r1)
 mtlr %r9
 ld %r9,416(%r1)
 mtcr %r9
 ld 2,112 +8*(2)(%r1); ld 2 +1,112 +8*(2 +1)(%r1); ld 2 +2,112 +8*(2 +2)(%r1); ld 2 +2 +1,112 +8*(2 +2 +1)(%r1); ld 2 +4,112 +8*(2 +4)(%r1); ld 2 +4 +1,112 +8*(2 +4 +1)(%r1); ld 2 +4 +2,112 +8*(2 +4 +2)(%r1); ld 2 +4 +2 +1,112 +8*(2 +4 +2 +1)(%r1)
 ld 10,112 +8*(10)(%r1); ld 10 +1,112 +8*(10 +1)(%r1); ld 10 +2,112 +8*(10 +2)(%r1); ld 10 +2 +1,112 +8*(10 +2 +1)(%r1)
 ld 0,112 +8*(0)(%r1)

 ld %r1,120(%r1)
.endm
# 737 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
real_vectors_start = (0x0100); real_vectors_end = (0x1900); real_vectors_len = (0x1900) - (0x0100); define_ftsec real_vectors; . = 0x0; start_real_vectors:
real_trampolines_start = (0x1900); real_trampolines_end = (0x3000); real_trampolines_len = (0x3000) - (0x1900); define_ftsec real_trampolines; . = 0x0; start_real_trampolines:
virt_vectors_start = (0x3000); virt_vectors_end = (0x5900); virt_vectors_len = (0x5900) - (0x3000); define_ftsec virt_vectors; . = 0x0; start_virt_vectors:
virt_trampolines_start = (0x5900); virt_trampolines_end = (0x7000); virt_trampolines_len = (0x7000) - (0x5900); define_ftsec virt_trampolines; . = 0x0; start_virt_trampolines:


 .globl start_real_trampolines
 .globl end_real_trampolines
 .globl start_virt_trampolines
 .globl end_virt_trampolines
# 756 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
fwnmi_page_start = (0x7000); fwnmi_page_end = (0x8000); fwnmi_page_len = (0x8000) - (0x7000); define_data_ftsec fwnmi_page; . = 0x0; . = fwnmi_page_len;
text_start = (0x8000); .section ".text","ax",@progbits; . = 0x0; start_text:




define_ftsec real_vectors;
# 772 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 .globl __start_interrupts
__start_interrupts:
# 801 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
define_ftsec virt_vectors;; exc_virt_0x3000_system_call_vectored_start = (0x3000); .if ((0x3000) % (0x1000) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x1000) != 0x20) && ((0x1000) != 0x80) && ((0x1000) != 0x100) && ((0x1000) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x3000) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x3000) - virt_vectors_start; .global exc_virt_0x3000_system_call_vectored; exc_virt_0x3000_system_call_vectored:

 mr %r9,%r13
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 mflr %r11
 mfctr %r12
 li %r10,(1 | 2)
 stb %r10,2354(%r13)

 b system_call_vectored_tramp



 nop


 .rept 127
 mr %r9,%r13
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 mflr %r11
 mfctr %r12
 li %r10,(1 | 2)
 stb %r10,2354(%r13)
 li %r0,-1

 b system_call_vectored_sigill_tramp



 .endr
.if (0x3000) + (0x1000) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x3000_system_call_vectored > (0x3000) + (0x1000) - exc_virt_0x3000_system_call_vectored_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x3000) + (0x1000) - virt_vectors_start);




.section __soft_mask_table,"a"; .balign 8; .llong (0xc000000000003000); .llong (0xc000000000004000); .previous


define_ftsec virt_trampolines;; .balign (1 << 4); .global system_call_vectored_tramp; system_call_vectored_tramp:
 ld %r10,24(%r13); ori %r10,%r10,((system_call_vectored_common - start_virt_trampolines + virt_trampolines_start))@l
 mtctr %r10
 bctr

define_ftsec virt_trampolines;; .balign (1 << 4); .global system_call_vectored_sigill_tramp; system_call_vectored_sigill_tramp:
 ld %r10,24(%r13); ori %r10,%r10,((system_call_vectored_sigill - start_virt_trampolines + virt_trampolines_start))@l
 mtctr %r10
 bctr




define_ftsec virt_vectors;; exc_virt_0x4000_unused_start = (0x4000); .if ((0x4000) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4000) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4000) - virt_vectors_start; .global exc_virt_0x4000_unused; exc_virt_0x4000_unused:; .if (0x4000) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4000_unused > (0x4000) + (0x100) - exc_virt_0x4000_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4000) + (0x100) - virt_vectors_start);
# 888 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_system_reset name
 .L_IVEC_\name\()=0x100
 .L_IAREA_\name\()=2392
 .L_IVIRT_\name\()=0




 .L_ISET_RI_\name\()=0
 .L_ISTACK_\name\()=0
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_system_reset system_reset ; do_define_int system_reset

define_ftsec real_vectors;; exc_real_0x100_system_reset_start = (0x100); .if ((0x100) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x100) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x100) - real_vectors_start; .global exc_real_0x100_system_reset; exc_real_0x100_system_reset:
# 919 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
971:
 661:; mtspr 0x112,%r13; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mtspr 0x131,%r13; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 std %r3,2392 +0*8(%r13)
 std %r4,2392 +1*8(%r13)
 std %r5,2392 +2*8(%r13)
 mfspr %r3,0x01B
 mfocrf %r4,0x80
 rlwinm. %r5,%r3,47-31,30,31
 bne+ system_reset_idle_wake

 mtocrf 0x80,%r4
 ld %r3,2392 +0*8(%r13)
 ld %r4,2392 +1*8(%r13)
 ld %r5,2392 +2*8(%r13)
 661:; mfspr %r13,0x112; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x131; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000002000 | 0x0000000000008000); .8byte (0x0000000000002000 | 0x0000000000008000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;


 GEN_INT_ENTRY system_reset, virt=0







.if (0x100) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x100_system_reset > (0x100) + (0x100) - exc_real_0x100_system_reset_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x100) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4100_unused_start = (0x4100); .if ((0x4100) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4100) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4100) - virt_vectors_start; .global exc_virt_0x4100_unused; exc_virt_0x4100_unused:; .if (0x4100) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4100_unused > (0x4100) + (0x100) - exc_virt_0x4100_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4100) + (0x100) - virt_vectors_start);


define_ftsec real_trampolines;; .balign (1 << 4); .global system_reset_idle_wake; system_reset_idle_wake:

 cmpwi 1,%r5,2
 bltlr 1
 ld %r12,24(%r13); ori %r12,%r12,((idle_return_gpr_loss - start_real_trampolines + real_trampolines_start))@l; addis %r12,%r12,((idle_return_gpr_loss - start_real_trampolines + real_trampolines_start))@h
 mtctr %r12
 bctr






define_ftsec real_trampolines;; .balign (1 << 4); .global system_reset_fwnmi; system_reset_fwnmi:
 GEN_INT_ENTRY system_reset, virt=0



.text; .balign (1 << 4); .global system_reset_common; .pushsection "_kprobe_blacklist","aw"; .8byte (system_reset_common) ; .popsection; system_reset_common_absolute = (system_reset_common - start_text + text_start); system_reset_common:
 __GEN_COMMON_ENTRY system_reset






 lhz %r10,2568(%r13)
 addi %r10,%r10,1
 sth %r10,2568(%r13)
 li %r10,(1<<(1))
 mtmsrd %r10,1

 mr %r10,%r1
 ld %r1,2552(%r13)
 subi %r1,%r1,784
 __GEN_COMMON_BODY system_reset

 addi %r3,%r1,112
 bl system_reset_exception


 li %r9,0
 mtmsrd %r9,1




 lhz %r10,2568(%r13)
 subi %r10,%r10,1
 sth %r10,2568(%r13)

 kuap_kernel_restore %r9, %r10
 EXCEPTION_RESTORE_REGS
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; rfid; b rfi_flush_fallback
# 1049 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_machine_check_early name
 .L_IVEC_\name\()=0x200
 .L_IAREA_\name\()=2472
 .L_IVIRT_\name\()=0
 .L_IREALMODE_COMMON_\name\()=1





 .L_ISET_RI_\name\()=0
 .L_ISTACK_\name\()=0
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1
 .L_IKUAP_\name\()=0
.endm ; int_define_machine_check_early machine_check_early ; do_define_int machine_check_early

.macro int_define_machine_check name
 .L_IVEC_\name\()=0x200
 .L_IAREA_\name\()=2472
 .L_IVIRT_\name\()=0
 .L_ISET_RI_\name\()=0
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_machine_check machine_check ; do_define_int machine_check

define_ftsec real_vectors;; exc_real_0x200_machine_check_start = (0x200); .if ((0x200) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x200) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x200) - real_vectors_start; .global exc_real_0x200_machine_check; exc_real_0x200_machine_check:
 GEN_INT_ENTRY machine_check_early, virt=0
.if (0x200) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x200_machine_check > (0x200) + (0x100) - exc_real_0x200_machine_check_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x200) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4200_unused_start = (0x4200); .if ((0x4200) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4200) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4200) - virt_vectors_start; .global exc_virt_0x4200_unused; exc_virt_0x4200_unused:; .if (0x4200) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4200_unused > (0x4200) + (0x100) - exc_virt_0x4200_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4200) + (0x100) - virt_vectors_start);


define_ftsec real_trampolines;; .balign (1 << 4); .global machine_check_fwnmi; machine_check_fwnmi:

 GEN_INT_ENTRY machine_check_early, virt=0
# 1097 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.text; .balign (1 << 4); .global machine_check_early_common; .pushsection "_kprobe_blacklist","aw"; .8byte (machine_check_early_common) ; .popsection; machine_check_early_common_absolute = (machine_check_early_common - start_text + text_start); machine_check_early_common:
 __GEN_REALMODE_COMMON_ENTRY machine_check_early
# 1121 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 lhz %r10,2570(%r13)
 cmpwi %r10,0
 cmpwi 1,%r10,4
 addi %r10,%r10,1
 sth %r10,2570(%r13)

 mr %r10,%r1
 bne 1f

 ld %r1,2560(%r13)
1:
 bgt 1,unrecoverable_mce
 subi %r1,%r1,784

 __GEN_COMMON_BODY machine_check_early

971:
 bl enable_machine_check
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000002000); .8byte (0x0000000000002000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 li %r10,(1<<(1))
 mtmsrd %r10,1

 addi %r3,%r1,112
 bl machine_check_early
 std %r3,456(%r1)
 ld %r12,376(%r1)
# 1158 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
971:
 rlwinm. %r11,%r12,47-31,30,31
 bne machine_check_idle_common
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000002000 | 0x0000000000008000); .8byte (0x0000000000002000 | 0x0000000000008000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
# 1171 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 lbz %r11,2760(%r13)
 cmpwi %r11,0
 bne mce_deliver






 andi. %r11,%r12,(1<<(14))
 bne mce_deliver







 andi. %r11,%r12,(1<<(1))
 beq unrecoverable_mce





 ld %r3,456(%r1)
 cmpdi %r3,0
 beq unrecoverable_mce






 bl machine_check_queue_event
 li %r9,0; mtmsrd %r9,1; lhz %r12,2570(%r13); subi %r12,%r12,1; sth %r12,2570(%r13); EXCEPTION_RESTORE_REGS
 rfid

mce_deliver:







971:
 ld %r10,384(%r1)
 mtspr 0x1c,%r10
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000002000000000); .8byte (0x0000002000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 li %r9,0; mtmsrd %r9,1; lhz %r12,2570(%r13); subi %r12,%r12,1; sth %r12,2570(%r13); EXCEPTION_RESTORE_REGS
 GEN_INT_ENTRY machine_check, virt=0

.text; .balign (1 << 4); .global machine_check_common; .pushsection "_kprobe_blacklist","aw"; .8byte (machine_check_common) ; .popsection; machine_check_common_absolute = (machine_check_common - start_text + text_start); machine_check_common:




 GEN_COMMON machine_check


 li %r10,(1<<(1))
 mtmsrd %r10,1
 addi %r3,%r1,112
 bl machine_check_exception_async
 b interrupt_return_srr







.text; .balign (1 << 4); .global machine_check_idle_common; .pushsection "_kprobe_blacklist","aw"; .8byte (machine_check_idle_common) ; .popsection; machine_check_idle_common_absolute = (machine_check_idle_common - start_text + text_start); machine_check_idle_common:
 bl machine_check_queue_event
# 1258 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 ld %r3,376(%r1)
 ld %r4,400(%r1)
 ld %r1,120(%r1)

 lhz %r11,2570(%r13)
 subi %r11,%r11,1
 sth %r11,2570(%r13)

 mtlr %r4
 rlwinm %r10,%r3,47-31,30,31
 cmpwi 1,%r10,2
 bltlr 1
 b idle_return_gpr_loss


.text; .balign (1 << 4); .global unrecoverable_mce; .pushsection "_kprobe_blacklist","aw"; .8byte (unrecoverable_mce) ; .popsection; unrecoverable_mce_absolute = (unrecoverable_mce - start_text + text_start); unrecoverable_mce:







971:
 li %r10,0
 mtmsrd %r10,1
 bl disable_machine_check
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000002000); .8byte (0x0000000000002000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 ld %r10,32(%r13)
 li %r3,(1<<(12))
 andc %r10,%r10,%r3
 mtmsrd %r10

 lhz %r12,2570(%r13)
 subi %r12,%r12,1
 sth %r12,2570(%r13)






 addi %r3,%r1,112
 bl machine_check_exception





 addi %r3,%r1,112
 bl unrecoverable_exception
 b .
# 1342 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_data_access name
 .L_IVEC_\name\()=0x300
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_data_access data_access ; do_define_int data_access

define_ftsec real_vectors;; exc_real_0x300_data_access_start = (0x300); .if ((0x300) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x300) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x300) - real_vectors_start; .global exc_real_0x300_data_access; exc_real_0x300_data_access:
 GEN_INT_ENTRY data_access, virt=0
.if (0x300) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x300_data_access > (0x300) + (0x80) - exc_real_0x300_data_access_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x300) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4300_data_access_start = (0x4300); .if ((0x4300) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4300) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4300) - virt_vectors_start; .global exc_virt_0x4300_data_access; exc_virt_0x4300_data_access:
 GEN_INT_ENTRY data_access, virt=1
.if (0x4300) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4300_data_access > (0x4300) + (0x80) - exc_virt_0x4300_data_access_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4300) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global data_access_common; .pushsection "_kprobe_blacklist","aw"; .8byte (data_access_common) ; .popsection; data_access_common_absolute = (data_access_common - start_text + text_start); data_access_common:
 GEN_COMMON data_access
 ld %r4,448(%r1)
 addi %r3,%r1,112
 andis. %r0,%r4,0x00400000@h
 bne- 1f
971:
 bl do_hash_fault
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 bl do_page_fault
974: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 975: .8byte 0x00000040; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 b interrupt_return_srr

1: bl do_break




 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_srr
# 1394 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_data_access_slb name
 .L_IVEC_\name\()=0x380
 .L_IDAR_\name\()=1
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_data_access_slb data_access_slb ; do_define_int data_access_slb

define_ftsec real_vectors;; exc_real_0x380_data_access_slb_start = (0x380); .if ((0x380) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x380) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x380) - real_vectors_start; .global exc_real_0x380_data_access_slb; exc_real_0x380_data_access_slb:
 GEN_INT_ENTRY data_access_slb, virt=0
.if (0x380) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x380_data_access_slb > (0x380) + (0x80) - exc_real_0x380_data_access_slb_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x380) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4380_data_access_slb_start = (0x4380); .if ((0x4380) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4380) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4380) - virt_vectors_start; .global exc_virt_0x4380_data_access_slb; exc_virt_0x4380_data_access_slb:
 GEN_INT_ENTRY data_access_slb, virt=1
.if (0x4380) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4380_data_access_slb > (0x4380) + (0x80) - exc_virt_0x4380_data_access_slb_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4380) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global data_access_slb_common; .pushsection "_kprobe_blacklist","aw"; .8byte (data_access_slb_common) ; .popsection; data_access_slb_common_absolute = (data_access_slb_common - start_text + text_start); data_access_slb_common:
 GEN_COMMON data_access_slb
971:

 addi %r3,%r1,112
 bl do_slb_fault
 cmpdi %r3,0
 bne- 1f
 b fast_interrupt_return_srr
1:
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:

 li %r3,-14
974: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 975: .8byte 0x00000040; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 std %r3,456(%r1)
 addi %r3,%r1,112
 bl do_bad_slb_fault
 b interrupt_return_srr
# 1435 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_instruction_access name
 .L_IVEC_\name\()=0x400
 .L_IISIDE_\name\()=1
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1



.endm ; int_define_instruction_access instruction_access ; do_define_int instruction_access

define_ftsec real_vectors;; exc_real_0x400_instruction_access_start = (0x400); .if ((0x400) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x400) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x400) - real_vectors_start; .global exc_real_0x400_instruction_access; exc_real_0x400_instruction_access:
 GEN_INT_ENTRY instruction_access, virt=0
.if (0x400) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x400_instruction_access > (0x400) + (0x80) - exc_real_0x400_instruction_access_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x400) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4400_instruction_access_start = (0x4400); .if ((0x4400) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4400) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4400) - virt_vectors_start; .global exc_virt_0x4400_instruction_access; exc_virt_0x4400_instruction_access:
 GEN_INT_ENTRY instruction_access, virt=1
.if (0x4400) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4400_instruction_access > (0x4400) + (0x80) - exc_virt_0x4400_instruction_access_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4400) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global instruction_access_common; .pushsection "_kprobe_blacklist","aw"; .8byte (instruction_access_common) ; .popsection; instruction_access_common_absolute = (instruction_access_common - start_text + text_start); instruction_access_common:
 GEN_COMMON instruction_access
 addi %r3,%r1,112
971:
 bl do_hash_fault
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 bl do_page_fault
974: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 975: .8byte 0x00000040; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 b interrupt_return_srr
# 1471 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_instruction_access_slb name
 .L_IVEC_\name\()=0x480
 .L_IISIDE_\name\()=1
 .L_IDAR_\name\()=1



.endm ; int_define_instruction_access_slb instruction_access_slb ; do_define_int instruction_access_slb

define_ftsec real_vectors;; exc_real_0x480_instruction_access_slb_start = (0x480); .if ((0x480) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x480) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x480) - real_vectors_start; .global exc_real_0x480_instruction_access_slb; exc_real_0x480_instruction_access_slb:
 GEN_INT_ENTRY instruction_access_slb, virt=0
.if (0x480) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x480_instruction_access_slb > (0x480) + (0x80) - exc_real_0x480_instruction_access_slb_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x480) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4480_instruction_access_slb_start = (0x4480); .if ((0x4480) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4480) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4480) - virt_vectors_start; .global exc_virt_0x4480_instruction_access_slb; exc_virt_0x4480_instruction_access_slb:
 GEN_INT_ENTRY instruction_access_slb, virt=1
.if (0x4480) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4480_instruction_access_slb > (0x4480) + (0x80) - exc_virt_0x4480_instruction_access_slb_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4480) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global instruction_access_slb_common; .pushsection "_kprobe_blacklist","aw"; .8byte (instruction_access_slb_common) ; .popsection; instruction_access_slb_common_absolute = (instruction_access_slb_common - start_text + text_start); instruction_access_slb_common:
 GEN_COMMON instruction_access_slb
971:

 addi %r3,%r1,112
 bl do_slb_fault
 cmpdi %r3,0
 bne- 1f
 b fast_interrupt_return_srr
1:
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:

 li %r3,-14
974: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 975: .8byte 0x00000040; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 std %r3,456(%r1)
 addi %r3,%r1,112
 bl do_bad_slb_fault
 b interrupt_return_srr
# 1529 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_hardware_interrupt name
 .L_IVEC_\name\()=0x500
 .L_IHSRR_IF_HVMODE_\name\()=1
 .L_IMASK_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_hardware_interrupt hardware_interrupt ; do_define_int hardware_interrupt

define_ftsec real_vectors;; exc_real_0x500_hardware_interrupt_start = (0x500); .if ((0x500) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x500) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x500) - real_vectors_start; .global exc_real_0x500_hardware_interrupt; exc_real_0x500_hardware_interrupt:
 GEN_INT_ENTRY hardware_interrupt, virt=0
.if (0x500) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x500_hardware_interrupt > (0x500) + (0x100) - exc_real_0x500_hardware_interrupt_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x500) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4500_hardware_interrupt_start = (0x4500); .if ((0x4500) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4500) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4500) - virt_vectors_start; .global exc_virt_0x4500_hardware_interrupt; exc_virt_0x4500_hardware_interrupt:
 GEN_INT_ENTRY hardware_interrupt, virt=1
.if (0x4500) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4500_hardware_interrupt > (0x4500) + (0x100) - exc_virt_0x4500_hardware_interrupt_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4500) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global hardware_interrupt_common; .pushsection "_kprobe_blacklist","aw"; .8byte (hardware_interrupt_common) ; .popsection; hardware_interrupt_common_absolute = (hardware_interrupt_common - start_text + text_start); hardware_interrupt_common:
 GEN_COMMON hardware_interrupt
 addi %r3,%r1,112
 bl do_IRQ
 971:
 b interrupt_return_hsrr
 972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 b interrupt_return_srr
 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 0x0000000000002000 | 0x0000000000008000; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;






.macro int_define_alignment name
 .L_IVEC_\name\()=0x600
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1



.endm ; int_define_alignment alignment ; do_define_int alignment

define_ftsec real_vectors;; exc_real_0x600_alignment_start = (0x600); .if ((0x600) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x600) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x600) - real_vectors_start; .global exc_real_0x600_alignment; exc_real_0x600_alignment:
 GEN_INT_ENTRY alignment, virt=0
.if (0x600) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x600_alignment > (0x600) + (0x100) - exc_real_0x600_alignment_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x600) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4600_alignment_start = (0x4600); .if ((0x4600) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4600) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4600) - virt_vectors_start; .global exc_virt_0x4600_alignment; exc_virt_0x4600_alignment:
 GEN_INT_ENTRY alignment, virt=1
.if (0x4600) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4600_alignment > (0x4600) + (0x100) - exc_virt_0x4600_alignment_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4600) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global alignment_common; .pushsection "_kprobe_blacklist","aw"; .8byte (alignment_common) ; .popsection; alignment_common_absolute = (alignment_common - start_text + text_start); alignment_common:
 GEN_COMMON alignment
 addi %r3,%r1,112
 bl alignment_exception
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_srr
# 1590 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_program_check name
 .L_IVEC_\name\()=0x700



.endm ; int_define_program_check program_check ; do_define_int program_check

define_ftsec real_vectors;; exc_real_0x700_program_check_start = (0x700); .if ((0x700) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x700) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x700) - real_vectors_start; .global exc_real_0x700_program_check; exc_real_0x700_program_check:
# 1620 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
971:
 tdi 0,0,0x48
 b 1f
 .long 0xa643707d
 .long 0xa6027a7d
 .long 0xa643727d
 .long 0xa6027b7d
 .long 0xa643737d
 .long 0xa600607d
 .long 0x01006b69
 .long 0xa6037b7d
 .long 0x34076039
 .long 0xa6037a7d
 .long 0x2400004c
 mfsprg %r11, 3
 mtsrr1 %r11
 mfsprg %r11, 2
 mtsrr0 %r11
 mfsprg %r11, 0
1:
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0; .8byte 1; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;


 GEN_INT_ENTRY program_check, virt=0
.if (0x700) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x700_program_check > (0x700) + (0x100) - exc_real_0x700_program_check_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x700) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4700_program_check_start = (0x4700); .if ((0x4700) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4700) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4700) - virt_vectors_start; .global exc_virt_0x4700_program_check; exc_virt_0x4700_program_check:
 GEN_INT_ENTRY program_check, virt=1
.if (0x4700) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4700_program_check > (0x4700) + (0x100) - exc_virt_0x4700_program_check_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4700) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global program_check_common; .pushsection "_kprobe_blacklist","aw"; .8byte (program_check_common) ; .popsection; program_check_common_absolute = (program_check_common - start_text + text_start); program_check_common:
 __GEN_COMMON_ENTRY program_check
# 1660 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 andi. %r10,%r12,(1<<(14))
 bne .Lnormal_stack

 andis. %r10,%r12,(0x00200000)@h
 bne .Lemergency_stack

 cmpdi %r1,-784
 blt .Lnormal_stack


.Lemergency_stack:
 andi. %r10,%r12,(1<<(14))

 mr %r10,%r1
 ld %r1,40(%r13)
 subi %r1,%r1,784
 .L_ISTACK_program_check=0
 __GEN_COMMON_BODY program_check
 b .Ldo_program_check

.Lnormal_stack:
 .L_ISTACK_program_check=1
 __GEN_COMMON_BODY program_check

.Ldo_program_check:
 addi %r3,%r1,112
 bl program_check_exception
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_srr
# 1700 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_fp_unavailable name
 .L_IVEC_\name\()=0x800



.endm ; int_define_fp_unavailable fp_unavailable ; do_define_int fp_unavailable

define_ftsec real_vectors;; exc_real_0x800_fp_unavailable_start = (0x800); .if ((0x800) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x800) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x800) - real_vectors_start; .global exc_real_0x800_fp_unavailable; exc_real_0x800_fp_unavailable:
 GEN_INT_ENTRY fp_unavailable, virt=0
.if (0x800) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x800_fp_unavailable > (0x800) + (0x100) - exc_real_0x800_fp_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x800) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4800_fp_unavailable_start = (0x4800); .if ((0x4800) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4800) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4800) - virt_vectors_start; .global exc_virt_0x4800_fp_unavailable; exc_virt_0x4800_fp_unavailable:
 GEN_INT_ENTRY fp_unavailable, virt=1
.if (0x4800) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4800_fp_unavailable > (0x4800) + (0x100) - exc_virt_0x4800_fp_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4800) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global fp_unavailable_common; .pushsection "_kprobe_blacklist","aw"; .8byte (fp_unavailable_common) ; .popsection; fp_unavailable_common_absolute = (fp_unavailable_common - start_text + text_start); fp_unavailable_common:
 GEN_COMMON fp_unavailable
 bne 1f
 addi %r3,%r1,112
 bl kernel_fp_unavailable_exception
0: trap
 EMIT_BUG_ENTRY 0b, "arch/powerpc/kernel/exceptions-64s.S", 1719, 0
1:
# 1730 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 bl load_up_fpu
 b fast_interrupt_return_srr
# 1757 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_decrementer name
 .L_IVEC_\name\()=0x900
 .L_IMASK_\name\()=1



.endm ; int_define_decrementer decrementer ; do_define_int decrementer

define_ftsec real_vectors;; exc_real_0x900_decrementer_start = (0x900); .if ((0x900) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x900) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x900) - real_vectors_start; .global exc_real_0x900_decrementer; exc_real_0x900_decrementer:
 GEN_INT_ENTRY decrementer, virt=0
.if (0x900) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x900_decrementer > (0x900) + (0x80) - exc_real_0x900_decrementer_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x900) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4900_decrementer_start = (0x4900); .if ((0x4900) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4900) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4900) - virt_vectors_start; .global exc_virt_0x4900_decrementer; exc_virt_0x4900_decrementer:
 GEN_INT_ENTRY decrementer, virt=1
.if (0x4900) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4900_decrementer > (0x4900) + (0x80) - exc_virt_0x4900_decrementer_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4900) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global decrementer_common; .pushsection "_kprobe_blacklist","aw"; .8byte (decrementer_common) ; .popsection; decrementer_common_absolute = (decrementer_common - start_text + text_start); decrementer_common:
 GEN_COMMON decrementer
 addi %r3,%r1,112
 bl timer_interrupt
 b interrupt_return_srr
# 1788 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_hdecrementer name
 .L_IVEC_\name\()=0x980
 .L_IHSRR_\name\()=1
 .L_ISTACK_\name\()=0
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_hdecrementer hdecrementer ; do_define_int hdecrementer

define_ftsec real_vectors;; exc_real_0x980_hdecrementer_start = (0x980); .if ((0x980) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x980) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x980) - real_vectors_start; .global exc_real_0x980_hdecrementer; exc_real_0x980_hdecrementer:
 GEN_INT_ENTRY hdecrementer, virt=0
.if (0x980) + (0x80) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x980_hdecrementer > (0x980) + (0x80) - exc_real_0x980_hdecrementer_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x980) + (0x80) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4980_hdecrementer_start = (0x4980); .if ((0x4980) % (0x80) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x80) != 0x20) && ((0x80) != 0x80) && ((0x80) != 0x100) && ((0x80) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4980) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4980) - virt_vectors_start; .global exc_virt_0x4980_hdecrementer; exc_virt_0x4980_hdecrementer:
 GEN_INT_ENTRY hdecrementer, virt=1
.if (0x4980) + (0x80) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4980_hdecrementer > (0x4980) + (0x80) - exc_virt_0x4980_hdecrementer_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4980) + (0x80) - virt_vectors_start);
.text; .balign (1 << 4); .global hdecrementer_common; .pushsection "_kprobe_blacklist","aw"; .8byte (hdecrementer_common) ; .popsection; hdecrementer_common_absolute = (hdecrementer_common - start_text + text_start); hdecrementer_common:
 __GEN_COMMON_ENTRY hdecrementer
# 1812 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 li %r10,0
 stb %r10,2352(%r13)
 ld %r10,128 +72(%r13)
 mtctr %r10
 mtcrf 0x80,%r9
 ld %r9,128 +0(%r13)
 ld %r10,128 +8(%r13)
 ld %r11,128 +16(%r13)
 ld %r12,128 +24(%r13)
 ld %r13,128 +32(%r13)
 hrfid
# 1839 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_doorbell_super name
 .L_IVEC_\name\()=0xa00
 .L_IMASK_\name\()=1



.endm ; int_define_doorbell_super doorbell_super ; do_define_int doorbell_super

define_ftsec real_vectors;; exc_real_0xa00_doorbell_super_start = (0xa00); .if ((0xa00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xa00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xa00) - real_vectors_start; .global exc_real_0xa00_doorbell_super; exc_real_0xa00_doorbell_super:
 GEN_INT_ENTRY doorbell_super, virt=0
.if (0xa00) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xa00_doorbell_super > (0xa00) + (0x100) - exc_real_0xa00_doorbell_super_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xa00) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4a00_doorbell_super_start = (0x4a00); .if ((0x4a00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4a00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4a00) - virt_vectors_start; .global exc_virt_0x4a00_doorbell_super; exc_virt_0x4a00_doorbell_super:
 GEN_INT_ENTRY doorbell_super, virt=1
.if (0x4a00) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4a00_doorbell_super > (0x4a00) + (0x100) - exc_virt_0x4a00_doorbell_super_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4a00) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global doorbell_super_common; .pushsection "_kprobe_blacklist","aw"; .8byte (doorbell_super_common) ; .popsection; doorbell_super_common_absolute = (doorbell_super_common - start_text + text_start); doorbell_super_common:
 GEN_COMMON doorbell_super
 addi %r3,%r1,112

 bl doorbell_exception



 b interrupt_return_srr


define_ftsec real_vectors;; exc_real_0xb00_unused_start = (0xb00); .if ((0xb00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xb00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xb00) - real_vectors_start; .global exc_real_0xb00_unused; exc_real_0xb00_unused:; .if (0xb00) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xb00_unused > (0xb00) + (0x100) - exc_real_0xb00_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xb00) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4b00_unused_start = (0x4b00); .if ((0x4b00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4b00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4b00) - virt_vectors_start; .global exc_virt_0x4b00_unused; exc_virt_0x4b00_unused:; .if (0x4b00) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4b00_unused > (0x4b00) + (0x100) - exc_virt_0x4b00_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4b00) + (0x100) - virt_vectors_start);
# 1892 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_system_call name
 .L_IVEC_\name\()=0xc00
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_system_call system_call ; do_define_int system_call

.macro SYSTEM_CALL virt
# 1908 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 mtctr %r13
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 std %r10,128 +8(%r13)
 953: .pushsection __stf_entry_barrier_fixup,"a"; .align 2; 954: .8byte 953b-954b; .popsection;; nop; nop; nop; 957: .pushsection __entry_flush_fixup,"a"; .align 2; 958: .8byte 957b-958b; .popsection;; nop; nop; nop;
 KVMTEST system_call kvm_hcall
 mfctr %r9
# 1928 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 mfspr %r11,0x01A
 mfspr %r12,0x01B

 or 2,2,2

 .if ! \virt
 ld %r10,24(%r13); ori %r10,%r10,((system_call_common_real - start_real_vectors + real_vectors_start))@l
 mtctr %r10
 bctr
 .else

 ld %r10,24(%r13); ori %r10,%r10,((system_call_common - start_virt_vectors + virt_vectors_start))@l
 mtctr %r10
 bctr



 .endif
# 1956 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.endm

define_ftsec real_vectors;; exc_real_0xc00_system_call_start = (0xc00); .if ((0xc00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xc00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xc00) - real_vectors_start; .global exc_real_0xc00_system_call; exc_real_0xc00_system_call:
 SYSTEM_CALL 0
.if (0xc00) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xc00_system_call > (0xc00) + (0x100) - exc_real_0xc00_system_call_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xc00) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4c00_system_call_start = (0x4c00); .if ((0x4c00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4c00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4c00) - virt_vectors_start; .global exc_virt_0x4c00_system_call; exc_virt_0x4c00_system_call:
 SYSTEM_CALL 1
.if (0x4c00) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4c00_system_call > (0x4c00) + (0x100) - exc_virt_0x4c00_system_call_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4c00) + (0x100) - virt_vectors_start);


define_ftsec real_trampolines;; .balign (1 << 4); .global kvm_hcall; kvm_hcall:
 std %r9,128 +0(%r13)
 std %r11,128 +16(%r13)
 std %r12,128 +24(%r13)
 mfcr %r9
 mfctr %r10
 std %r10,128 +32(%r13)
 li %r10,0
 std %r10,128 +56(%r13)
 std %r10,128 +72(%r13)





971:
 mfspr %r10,0x380
 std %r10,128 +64(%r13)
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 or 2,2,2






 ld %r10,24(%r13); ori %r10,%r10,((kvmppc_hcall - start_real_trampolines + real_trampolines_start))@l; addis %r10,%r10,((kvmppc_hcall - start_real_trampolines + real_trampolines_start))@h
 mtctr %r10
 bctr
# 2006 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_single_step name
 .L_IVEC_\name\()=0xd00



.endm ; int_define_single_step single_step ; do_define_int single_step

define_ftsec real_vectors;; exc_real_0xd00_single_step_start = (0xd00); .if ((0xd00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xd00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xd00) - real_vectors_start; .global exc_real_0xd00_single_step; exc_real_0xd00_single_step:
 GEN_INT_ENTRY single_step, virt=0
.if (0xd00) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xd00_single_step > (0xd00) + (0x100) - exc_real_0xd00_single_step_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xd00) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4d00_single_step_start = (0x4d00); .if ((0x4d00) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4d00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4d00) - virt_vectors_start; .global exc_virt_0x4d00_single_step; exc_virt_0x4d00_single_step:
 GEN_INT_ENTRY single_step, virt=1
.if (0x4d00) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4d00_single_step > (0x4d00) + (0x100) - exc_virt_0x4d00_single_step_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4d00) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global single_step_common; .pushsection "_kprobe_blacklist","aw"; .8byte (single_step_common) ; .popsection; single_step_common_absolute = (single_step_common - start_text + text_start); single_step_common:
 GEN_COMMON single_step
 addi %r3,%r1,112
 bl single_step_exception
 b interrupt_return_srr
# 2038 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_h_data_storage name
 .L_IVEC_\name\()=0xe00
 .L_IHSRR_\name\()=1
 .L_IDAR_\name\()=1
 .L_IDSISR_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_h_data_storage h_data_storage ; do_define_int h_data_storage

define_ftsec real_vectors;; exc_real_0xe00_h_data_storage_start = (0xe00); .if ((0xe00) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xe00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xe00) - real_vectors_start; .global exc_real_0xe00_h_data_storage; exc_real_0xe00_h_data_storage:
 GEN_INT_ENTRY h_data_storage, virt=0, ool=1
.if (0xe00) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xe00_h_data_storage > (0xe00) + (0x20) - exc_real_0xe00_h_data_storage_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xe00) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4e00_h_data_storage_start = (0x4e00); .if ((0x4e00) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4e00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4e00) - virt_vectors_start; .global exc_virt_0x4e00_h_data_storage; exc_virt_0x4e00_h_data_storage:
 GEN_INT_ENTRY h_data_storage, virt=1, ool=1
.if (0x4e00) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4e00_h_data_storage > (0x4e00) + (0x20) - exc_virt_0x4e00_h_data_storage_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4e00) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global h_data_storage_common; .pushsection "_kprobe_blacklist","aw"; .8byte (h_data_storage_common) ; .popsection; h_data_storage_common_absolute = (h_data_storage_common - start_text + text_start); h_data_storage_common:
 GEN_COMMON h_data_storage
 addi %r3,%r1,112
971:
 bl do_bad_page_fault_segv
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 bl unknown_exception
974: .popsection; .pushsection __mmu_ftr_fixup,"a"; .align 3; 975: .8byte 0x00000040; .8byte 0x00000040; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 b interrupt_return_hsrr







.macro int_define_h_instr_storage name
 .L_IVEC_\name\()=0xe20
 .L_IHSRR_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_h_instr_storage h_instr_storage ; do_define_int h_instr_storage

define_ftsec real_vectors;; exc_real_0xe20_h_instr_storage_start = (0xe20); .if ((0xe20) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xe20) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xe20) - real_vectors_start; .global exc_real_0xe20_h_instr_storage; exc_real_0xe20_h_instr_storage:
 GEN_INT_ENTRY h_instr_storage, virt=0, ool=1
.if (0xe20) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xe20_h_instr_storage > (0xe20) + (0x20) - exc_real_0xe20_h_instr_storage_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xe20) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4e20_h_instr_storage_start = (0x4e20); .if ((0x4e20) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4e20) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4e20) - virt_vectors_start; .global exc_virt_0x4e20_h_instr_storage; exc_virt_0x4e20_h_instr_storage:
 GEN_INT_ENTRY h_instr_storage, virt=1, ool=1
.if (0x4e20) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4e20_h_instr_storage > (0x4e20) + (0x20) - exc_virt_0x4e20_h_instr_storage_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4e20) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global h_instr_storage_common; .pushsection "_kprobe_blacklist","aw"; .8byte (h_instr_storage_common) ; .popsection; h_instr_storage_common_absolute = (h_instr_storage_common - start_text + text_start); h_instr_storage_common:
 GEN_COMMON h_instr_storage
 addi %r3,%r1,112
 bl unknown_exception
 b interrupt_return_hsrr





.macro int_define_emulation_assist name
 .L_IVEC_\name\()=0xe40
 .L_IHSRR_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_emulation_assist emulation_assist ; do_define_int emulation_assist

define_ftsec real_vectors;; exc_real_0xe40_emulation_assist_start = (0xe40); .if ((0xe40) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xe40) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xe40) - real_vectors_start; .global exc_real_0xe40_emulation_assist; exc_real_0xe40_emulation_assist:
 GEN_INT_ENTRY emulation_assist, virt=0, ool=1
.if (0xe40) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xe40_emulation_assist > (0xe40) + (0x20) - exc_real_0xe40_emulation_assist_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xe40) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4e40_emulation_assist_start = (0x4e40); .if ((0x4e40) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4e40) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4e40) - virt_vectors_start; .global exc_virt_0x4e40_emulation_assist; exc_virt_0x4e40_emulation_assist:
 GEN_INT_ENTRY emulation_assist, virt=1, ool=1
.if (0x4e40) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4e40_emulation_assist > (0x4e40) + (0x20) - exc_virt_0x4e40_emulation_assist_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4e40) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global emulation_assist_common; .pushsection "_kprobe_blacklist","aw"; .8byte (emulation_assist_common) ; .popsection; emulation_assist_common_absolute = (emulation_assist_common - start_text + text_start); emulation_assist_common:
 GEN_COMMON emulation_assist
 addi %r3,%r1,112
 bl emulation_assist_interrupt
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_hsrr
# 2137 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_hmi_exception_early name
 .L_IVEC_\name\()=0xe60
 .L_IHSRR_\name\()=1
 .L_IREALMODE_COMMON_\name\()=1
 .L_ISTACK_\name\()=0
 .L_IKUAP_\name\()=0
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_hmi_exception_early hmi_exception_early ; do_define_int hmi_exception_early

.macro int_define_hmi_exception name
 .L_IVEC_\name\()=0xe60
 .L_IHSRR_\name\()=1
 .L_IMASK_\name\()=1
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_hmi_exception hmi_exception ; do_define_int hmi_exception

define_ftsec real_vectors;; exc_real_0xe60_hmi_exception_start = (0xe60); .if ((0xe60) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xe60) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xe60) - real_vectors_start; .global exc_real_0xe60_hmi_exception; exc_real_0xe60_hmi_exception:
 GEN_INT_ENTRY hmi_exception_early, virt=0, ool=1
.if (0xe60) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xe60_hmi_exception > (0xe60) + (0x20) - exc_real_0xe60_hmi_exception_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xe60) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4e60_unused_start = (0x4e60); .if ((0x4e60) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4e60) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4e60) - virt_vectors_start; .global exc_virt_0x4e60_unused; exc_virt_0x4e60_unused:; .if (0x4e60) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4e60_unused > (0x4e60) + (0x20) - exc_virt_0x4e60_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4e60) + (0x20) - virt_vectors_start);

.text; .balign (1 << 4); .global hmi_exception_early_common; .pushsection "_kprobe_blacklist","aw"; .8byte (hmi_exception_early_common) ; .popsection; hmi_exception_early_common_absolute = (hmi_exception_early_common - start_text + text_start); hmi_exception_early_common:
 __GEN_REALMODE_COMMON_ENTRY hmi_exception_early

 mr %r10,%r1
 ld %r1,40(%r13)
 subi %r1,%r1,784

 __GEN_COMMON_BODY hmi_exception_early

 addi %r3,%r1,112
 bl hmi_exception_realmode
 cmpdi 0,%r3,0
 bne 1f

 EXCEPTION_RESTORE_REGS hsrr=1
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; hrfid; b hrfi_flush_fallback

1:




 EXCEPTION_RESTORE_REGS hsrr=1
 GEN_INT_ENTRY hmi_exception, virt=0

.text; .balign (1 << 4); .global hmi_exception_common; .pushsection "_kprobe_blacklist","aw"; .8byte (hmi_exception_common) ; .popsection; hmi_exception_common_absolute = (hmi_exception_common - start_text + text_start); hmi_exception_common:
 GEN_COMMON hmi_exception
 addi %r3,%r1,112
 bl handle_hmi_exception
 b interrupt_return_hsrr







.macro int_define_h_doorbell name
 .L_IVEC_\name\()=0xe80
 .L_IHSRR_\name\()=1
 .L_IMASK_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_h_doorbell h_doorbell ; do_define_int h_doorbell

define_ftsec real_vectors;; exc_real_0xe80_h_doorbell_start = (0xe80); .if ((0xe80) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xe80) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xe80) - real_vectors_start; .global exc_real_0xe80_h_doorbell; exc_real_0xe80_h_doorbell:
 GEN_INT_ENTRY h_doorbell, virt=0, ool=1
.if (0xe80) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xe80_h_doorbell > (0xe80) + (0x20) - exc_real_0xe80_h_doorbell_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xe80) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4e80_h_doorbell_start = (0x4e80); .if ((0x4e80) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4e80) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4e80) - virt_vectors_start; .global exc_virt_0x4e80_h_doorbell; exc_virt_0x4e80_h_doorbell:
 GEN_INT_ENTRY h_doorbell, virt=1, ool=1
.if (0x4e80) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4e80_h_doorbell > (0x4e80) + (0x20) - exc_virt_0x4e80_h_doorbell_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4e80) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global h_doorbell_common; .pushsection "_kprobe_blacklist","aw"; .8byte (h_doorbell_common) ; .popsection; h_doorbell_common_absolute = (h_doorbell_common - start_text + text_start); h_doorbell_common:
 GEN_COMMON h_doorbell
 addi %r3,%r1,112

 bl doorbell_exception



 b interrupt_return_hsrr







.macro int_define_h_virt_irq name
 .L_IVEC_\name\()=0xea0
 .L_IHSRR_\name\()=1
 .L_IMASK_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_h_virt_irq h_virt_irq ; do_define_int h_virt_irq

define_ftsec real_vectors;; exc_real_0xea0_h_virt_irq_start = (0xea0); .if ((0xea0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xea0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xea0) - real_vectors_start; .global exc_real_0xea0_h_virt_irq; exc_real_0xea0_h_virt_irq:
 GEN_INT_ENTRY h_virt_irq, virt=0, ool=1
.if (0xea0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xea0_h_virt_irq > (0xea0) + (0x20) - exc_real_0xea0_h_virt_irq_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xea0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4ea0_h_virt_irq_start = (0x4ea0); .if ((0x4ea0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4ea0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4ea0) - virt_vectors_start; .global exc_virt_0x4ea0_h_virt_irq; exc_virt_0x4ea0_h_virt_irq:
 GEN_INT_ENTRY h_virt_irq, virt=1, ool=1
.if (0x4ea0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4ea0_h_virt_irq > (0x4ea0) + (0x20) - exc_virt_0x4ea0_h_virt_irq_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4ea0) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global h_virt_irq_common; .pushsection "_kprobe_blacklist","aw"; .8byte (h_virt_irq_common) ; .popsection; h_virt_irq_common_absolute = (h_virt_irq_common - start_text + text_start); h_virt_irq_common:
 GEN_COMMON h_virt_irq
 addi %r3,%r1,112
 bl do_IRQ
 b interrupt_return_hsrr


define_ftsec real_vectors;; exc_real_0xec0_unused_start = (0xec0); .if ((0xec0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xec0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xec0) - real_vectors_start; .global exc_real_0xec0_unused; exc_real_0xec0_unused:; .if (0xec0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xec0_unused > (0xec0) + (0x20) - exc_real_0xec0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xec0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4ec0_unused_start = (0x4ec0); .if ((0x4ec0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4ec0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4ec0) - virt_vectors_start; .global exc_virt_0x4ec0_unused; exc_virt_0x4ec0_unused:; .if (0x4ec0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4ec0_unused > (0x4ec0) + (0x20) - exc_virt_0x4ec0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4ec0) + (0x20) - virt_vectors_start);
define_ftsec real_vectors;; exc_real_0xee0_unused_start = (0xee0); .if ((0xee0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xee0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xee0) - real_vectors_start; .global exc_real_0xee0_unused; exc_real_0xee0_unused:; .if (0xee0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xee0_unused > (0xee0) + (0x20) - exc_real_0xee0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xee0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4ee0_unused_start = (0x4ee0); .if ((0x4ee0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4ee0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4ee0) - virt_vectors_start; .global exc_virt_0x4ee0_unused; exc_virt_0x4ee0_unused:; .if (0x4ee0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4ee0_unused > (0x4ee0) + (0x20) - exc_virt_0x4ee0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4ee0) + (0x20) - virt_vectors_start);
# 2268 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_performance_monitor name
 .L_IVEC_\name\()=0xf00
 .L_IMASK_\name\()=2



.endm ; int_define_performance_monitor performance_monitor ; do_define_int performance_monitor

define_ftsec real_vectors;; exc_real_0xf00_performance_monitor_start = (0xf00); .if ((0xf00) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xf00) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xf00) - real_vectors_start; .global exc_real_0xf00_performance_monitor; exc_real_0xf00_performance_monitor:
 GEN_INT_ENTRY performance_monitor, virt=0, ool=1
.if (0xf00) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xf00_performance_monitor > (0xf00) + (0x20) - exc_real_0xf00_performance_monitor_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xf00) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4f00_performance_monitor_start = (0x4f00); .if ((0x4f00) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4f00) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4f00) - virt_vectors_start; .global exc_virt_0x4f00_performance_monitor; exc_virt_0x4f00_performance_monitor:
 GEN_INT_ENTRY performance_monitor, virt=1, ool=1
.if (0x4f00) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4f00_performance_monitor > (0x4f00) + (0x20) - exc_virt_0x4f00_performance_monitor_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4f00) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global performance_monitor_common; .pushsection "_kprobe_blacklist","aw"; .8byte (performance_monitor_common) ; .popsection; performance_monitor_common_absolute = (performance_monitor_common - start_text + text_start); performance_monitor_common:
 GEN_COMMON performance_monitor
 addi %r3,%r1,112
 bl performance_monitor_exception
 b interrupt_return_srr
# 2295 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_altivec_unavailable name
 .L_IVEC_\name\()=0xf20



.endm ; int_define_altivec_unavailable altivec_unavailable ; do_define_int altivec_unavailable

define_ftsec real_vectors;; exc_real_0xf20_altivec_unavailable_start = (0xf20); .if ((0xf20) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xf20) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xf20) - real_vectors_start; .global exc_real_0xf20_altivec_unavailable; exc_real_0xf20_altivec_unavailable:
 GEN_INT_ENTRY altivec_unavailable, virt=0, ool=1
.if (0xf20) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xf20_altivec_unavailable > (0xf20) + (0x20) - exc_real_0xf20_altivec_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xf20) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4f20_altivec_unavailable_start = (0x4f20); .if ((0x4f20) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4f20) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4f20) - virt_vectors_start; .global exc_virt_0x4f20_altivec_unavailable; exc_virt_0x4f20_altivec_unavailable:
 GEN_INT_ENTRY altivec_unavailable, virt=1, ool=1
.if (0x4f20) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4f20_altivec_unavailable > (0x4f20) + (0x20) - exc_virt_0x4f20_altivec_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4f20) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global altivec_unavailable_common; .pushsection "_kprobe_blacklist","aw"; .8byte (altivec_unavailable_common) ; .popsection; altivec_unavailable_common_absolute = (altivec_unavailable_common - start_text + text_start); altivec_unavailable_common:
 GEN_COMMON altivec_unavailable

971:
 beq 1f
# 2322 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 bl load_up_altivec
 b fast_interrupt_return_srr






1:
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x00000002); .8byte (0x00000002); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 addi %r3,%r1,112
 bl altivec_unavailable_exception
 b interrupt_return_srr
# 2344 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_vsx_unavailable name
 .L_IVEC_\name\()=0xf40



.endm ; int_define_vsx_unavailable vsx_unavailable ; do_define_int vsx_unavailable

define_ftsec real_vectors;; exc_real_0xf40_vsx_unavailable_start = (0xf40); .if ((0xf40) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xf40) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xf40) - real_vectors_start; .global exc_real_0xf40_vsx_unavailable; exc_real_0xf40_vsx_unavailable:
 GEN_INT_ENTRY vsx_unavailable, virt=0, ool=1
.if (0xf40) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xf40_vsx_unavailable > (0xf40) + (0x20) - exc_real_0xf40_vsx_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xf40) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4f40_vsx_unavailable_start = (0x4f40); .if ((0x4f40) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4f40) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4f40) - virt_vectors_start; .global exc_virt_0x4f40_vsx_unavailable; exc_virt_0x4f40_vsx_unavailable:
 GEN_INT_ENTRY vsx_unavailable, virt=1, ool=1
.if (0x4f40) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4f40_vsx_unavailable > (0x4f40) + (0x20) - exc_virt_0x4f40_vsx_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4f40) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global vsx_unavailable_common; .pushsection "_kprobe_blacklist","aw"; .8byte (vsx_unavailable_common) ; .popsection; vsx_unavailable_common_absolute = (vsx_unavailable_common - start_text + text_start); vsx_unavailable_common:
 GEN_COMMON vsx_unavailable

971:
 beq 1f
# 2371 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 b load_up_vsx






1:
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000004000000); .8byte (0x0000000004000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 addi %r3,%r1,112
 bl vsx_unavailable_exception
 b interrupt_return_srr
# 2393 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_facility_unavailable name
 .L_IVEC_\name\()=0xf60



.endm ; int_define_facility_unavailable facility_unavailable ; do_define_int facility_unavailable

define_ftsec real_vectors;; exc_real_0xf60_facility_unavailable_start = (0xf60); .if ((0xf60) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xf60) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xf60) - real_vectors_start; .global exc_real_0xf60_facility_unavailable; exc_real_0xf60_facility_unavailable:
 GEN_INT_ENTRY facility_unavailable, virt=0, ool=1
.if (0xf60) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xf60_facility_unavailable > (0xf60) + (0x20) - exc_real_0xf60_facility_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xf60) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4f60_facility_unavailable_start = (0x4f60); .if ((0x4f60) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4f60) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4f60) - virt_vectors_start; .global exc_virt_0x4f60_facility_unavailable; exc_virt_0x4f60_facility_unavailable:
 GEN_INT_ENTRY facility_unavailable, virt=1, ool=1
.if (0x4f60) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4f60_facility_unavailable > (0x4f60) + (0x20) - exc_virt_0x4f60_facility_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4f60) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global facility_unavailable_common; .pushsection "_kprobe_blacklist","aw"; .8byte (facility_unavailable_common) ; .popsection; facility_unavailable_common_absolute = (facility_unavailable_common - start_text + text_start); facility_unavailable_common:
 GEN_COMMON facility_unavailable
 addi %r3,%r1,112
 bl facility_unavailable_exception
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_srr
# 2421 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_h_facility_unavailable name
 .L_IVEC_\name\()=0xf80
 .L_IHSRR_\name\()=1
 .L_IKVM_REAL_\name\()=1
 .L_IKVM_VIRT_\name\()=1
.endm ; int_define_h_facility_unavailable h_facility_unavailable ; do_define_int h_facility_unavailable

define_ftsec real_vectors;; exc_real_0xf80_h_facility_unavailable_start = (0xf80); .if ((0xf80) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xf80) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xf80) - real_vectors_start; .global exc_real_0xf80_h_facility_unavailable; exc_real_0xf80_h_facility_unavailable:
 GEN_INT_ENTRY h_facility_unavailable, virt=0, ool=1
.if (0xf80) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xf80_h_facility_unavailable > (0xf80) + (0x20) - exc_real_0xf80_h_facility_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xf80) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4f80_h_facility_unavailable_start = (0x4f80); .if ((0x4f80) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4f80) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4f80) - virt_vectors_start; .global exc_virt_0x4f80_h_facility_unavailable; exc_virt_0x4f80_h_facility_unavailable:
 GEN_INT_ENTRY h_facility_unavailable, virt=1, ool=1
.if (0x4f80) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4f80_h_facility_unavailable > (0x4f80) + (0x20) - exc_virt_0x4f80_h_facility_unavailable_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4f80) + (0x20) - virt_vectors_start);
.text; .balign (1 << 4); .global h_facility_unavailable_common; .pushsection "_kprobe_blacklist","aw"; .8byte (h_facility_unavailable_common) ; .popsection; h_facility_unavailable_common_absolute = (h_facility_unavailable_common - start_text + text_start); h_facility_unavailable_common:
 GEN_COMMON h_facility_unavailable
 addi %r3,%r1,112
 bl facility_unavailable_exception
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b interrupt_return_hsrr


define_ftsec real_vectors;; exc_real_0xfa0_unused_start = (0xfa0); .if ((0xfa0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xfa0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xfa0) - real_vectors_start; .global exc_real_0xfa0_unused; exc_real_0xfa0_unused:; .if (0xfa0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xfa0_unused > (0xfa0) + (0x20) - exc_real_0xfa0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xfa0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4fa0_unused_start = (0x4fa0); .if ((0x4fa0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4fa0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4fa0) - virt_vectors_start; .global exc_virt_0x4fa0_unused; exc_virt_0x4fa0_unused:; .if (0x4fa0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4fa0_unused > (0x4fa0) + (0x20) - exc_virt_0x4fa0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4fa0) + (0x20) - virt_vectors_start);
define_ftsec real_vectors;; exc_real_0xfc0_unused_start = (0xfc0); .if ((0xfc0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xfc0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xfc0) - real_vectors_start; .global exc_real_0xfc0_unused; exc_real_0xfc0_unused:; .if (0xfc0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xfc0_unused > (0xfc0) + (0x20) - exc_real_0xfc0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xfc0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4fc0_unused_start = (0x4fc0); .if ((0x4fc0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4fc0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4fc0) - virt_vectors_start; .global exc_virt_0x4fc0_unused; exc_virt_0x4fc0_unused:; .if (0x4fc0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4fc0_unused > (0x4fc0) + (0x20) - exc_virt_0x4fc0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4fc0) + (0x20) - virt_vectors_start);
define_ftsec real_vectors;; exc_real_0xfe0_unused_start = (0xfe0); .if ((0xfe0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0xfe0) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0xfe0) - real_vectors_start; .global exc_real_0xfe0_unused; exc_real_0xfe0_unused:; .if (0xfe0) + (0x20) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0xfe0_unused > (0xfe0) + (0x20) - exc_real_0xfe0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0xfe0) + (0x20) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x4fe0_unused_start = (0x4fe0); .if ((0x4fe0) % (0x20) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x20) != 0x20) && ((0x20) != 0x80) && ((0x20) != 0x100) && ((0x20) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x4fe0) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x4fe0) - virt_vectors_start; .global exc_virt_0x4fe0_unused; exc_virt_0x4fe0_unused:; .if (0x4fe0) + (0x20) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x4fe0_unused > (0x4fe0) + (0x20) - exc_virt_0x4fe0_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x4fe0) + (0x20) - virt_vectors_start);

define_ftsec real_vectors;; exc_real_0x1000_unused_start = (0x1000); .if ((0x1000) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1000) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1000) - real_vectors_start; .global exc_real_0x1000_unused; exc_real_0x1000_unused:; .if (0x1000) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1000_unused > (0x1000) + (0x100) - exc_real_0x1000_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1000) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5000_unused_start = (0x5000); .if ((0x5000) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5000) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5000) - virt_vectors_start; .global exc_virt_0x5000_unused; exc_virt_0x5000_unused:; .if (0x5000) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5000_unused > (0x5000) + (0x100) - exc_virt_0x5000_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5000) + (0x100) - virt_vectors_start);
define_ftsec real_vectors;; exc_real_0x1100_unused_start = (0x1100); .if ((0x1100) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1100) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1100) - real_vectors_start; .global exc_real_0x1100_unused; exc_real_0x1100_unused:; .if (0x1100) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1100_unused > (0x1100) + (0x100) - exc_real_0x1100_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1100) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5100_unused_start = (0x5100); .if ((0x5100) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5100) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5100) - virt_vectors_start; .global exc_virt_0x5100_unused; exc_virt_0x5100_unused:; .if (0x5100) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5100_unused > (0x5100) + (0x100) - exc_virt_0x5100_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5100) + (0x100) - virt_vectors_start);
# 2471 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
define_ftsec real_vectors;; exc_real_0x1200_unused_start = (0x1200); .if ((0x1200) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1200) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1200) - real_vectors_start; .global exc_real_0x1200_unused; exc_real_0x1200_unused:; .if (0x1200) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1200_unused > (0x1200) + (0x100) - exc_real_0x1200_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1200) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5200_unused_start = (0x5200); .if ((0x5200) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5200) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5200) - virt_vectors_start; .global exc_virt_0x5200_unused; exc_virt_0x5200_unused:; .if (0x5200) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5200_unused > (0x5200) + (0x100) - exc_virt_0x5200_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5200) + (0x100) - virt_vectors_start);
# 2482 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_instruction_breakpoint name
 .L_IVEC_\name\()=0x1300



.endm ; int_define_instruction_breakpoint instruction_breakpoint ; do_define_int instruction_breakpoint

define_ftsec real_vectors;; exc_real_0x1300_instruction_breakpoint_start = (0x1300); .if ((0x1300) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1300) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1300) - real_vectors_start; .global exc_real_0x1300_instruction_breakpoint; exc_real_0x1300_instruction_breakpoint:
 GEN_INT_ENTRY instruction_breakpoint, virt=0
.if (0x1300) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1300_instruction_breakpoint > (0x1300) + (0x100) - exc_real_0x1300_instruction_breakpoint_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1300) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5300_instruction_breakpoint_start = (0x5300); .if ((0x5300) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5300) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5300) - virt_vectors_start; .global exc_virt_0x5300_instruction_breakpoint; exc_virt_0x5300_instruction_breakpoint:
 GEN_INT_ENTRY instruction_breakpoint, virt=1
.if (0x5300) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5300_instruction_breakpoint > (0x5300) + (0x100) - exc_virt_0x5300_instruction_breakpoint_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5300) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global instruction_breakpoint_common; .pushsection "_kprobe_blacklist","aw"; .8byte (instruction_breakpoint_common) ; .popsection; instruction_breakpoint_common_absolute = (instruction_breakpoint_common - start_text + text_start); instruction_breakpoint_common:
 GEN_COMMON instruction_breakpoint
 addi %r3,%r1,112
 bl instruction_breakpoint_exception
 b interrupt_return_srr


define_ftsec real_vectors;; exc_real_0x1400_unused_start = (0x1400); .if ((0x1400) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1400) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1400) - real_vectors_start; .global exc_real_0x1400_unused; exc_real_0x1400_unused:; .if (0x1400) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1400_unused > (0x1400) + (0x100) - exc_real_0x1400_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1400) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5400_unused_start = (0x5400); .if ((0x5400) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5400) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5400) - virt_vectors_start; .global exc_virt_0x5400_unused; exc_virt_0x5400_unused:; .if (0x5400) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5400_unused > (0x5400) + (0x100) - exc_virt_0x5400_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5400) + (0x100) - virt_vectors_start);
# 2517 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro int_define_denorm_exception name
 .L_IVEC_\name\()=0x1500
 .L_IHSRR_\name\()=1
 .L_IBRANCH_TO_COMMON_\name\()=0
 .L_IKVM_REAL_\name\()=1
.endm ; int_define_denorm_exception denorm_exception ; do_define_int denorm_exception

define_ftsec real_vectors;; exc_real_0x1500_denorm_exception_start = (0x1500); .if ((0x1500) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1500) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1500) - real_vectors_start; .global exc_real_0x1500_denorm_exception; exc_real_0x1500_denorm_exception:
 GEN_INT_ENTRY denorm_exception, virt=0

 andis. %r10,%r12,(0x00100000)@h
 bne+ denorm_assist

 GEN_BRANCH_TO_COMMON denorm_exception, virt=0
.if (0x1500) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1500_denorm_exception > (0x1500) + (0x100) - exc_real_0x1500_denorm_exception_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1500) + (0x100) - real_vectors_start);

define_ftsec virt_vectors;; exc_virt_0x5500_denorm_exception_start = (0x5500); .if ((0x5500) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5500) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5500) - virt_vectors_start; .global exc_virt_0x5500_denorm_exception; exc_virt_0x5500_denorm_exception:
 GEN_INT_ENTRY denorm_exception, virt=1
 andis. %r10,%r12,(0x00100000)@h
 bne+ denorm_assist
 GEN_BRANCH_TO_COMMON denorm_exception, virt=1
.if (0x5500) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5500_denorm_exception > (0x5500) + (0x100) - exc_virt_0x5500_denorm_exception_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5500) + (0x100) - virt_vectors_start);





define_ftsec real_trampolines;; .balign (1 << 4); .global denorm_assist; denorm_assist:
971:




 mfmsr %r10
 ori %r10,%r10,((1<<(13))|(1<<(11))|(1<<(8)))
 xori %r10,%r10,((1<<(11))|(1<<(8)))
 mtmsrd %r10
 sync

 .Lreg=0
 .rept 32
 fmr .Lreg,.Lreg
 .Lreg=.Lreg+1
 .endr

972: .pushsection __ftr_alt_97,"a"; .align 2; 973:




 mfmsr %r10
 oris %r10,%r10,(1<<(23))@h
 mtmsrd %r10
 sync

 .Lreg=0
 .rept 32
 .long (((0xf0000780 | ((((((.Lreg)) & 0x1f) << 21) | ((((.Lreg)) & 0x20) >> 5)) | (((((.Lreg)) & 0x1f) << 16) | ((((.Lreg)) & 0x20) >> 3)) | (((((.Lreg)) & 0x1f) << 11) | ((((.Lreg)) & 0x20) >> 4))))))
 .Lreg=.Lreg+1
 .endr

974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000000008000; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

971:
 b denorm_done
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000000010000); .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;




 .Lreg=32
 .rept 32
 .long (((0xf0000780 | ((((((.Lreg)) & 0x1f) << 21) | ((((.Lreg)) & 0x20) >> 5)) | (((((.Lreg)) & 0x1f) << 16) | ((((.Lreg)) & 0x20) >> 3)) | (((((.Lreg)) & 0x1f) << 11) | ((((.Lreg)) & 0x20) >> 4))))))
 .Lreg=.Lreg+1
 .endr

denorm_done:
 mfspr %r11,0x13A
 subi %r11,%r11,4
 mtspr 0x13A,%r11
 mtcrf 0x80,%r9
 ld %r9,128 +0(%r13)
971:
 ld %r10,128 +64(%r13)
 mtspr 0x380,%r10
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
971:
 ld %r10,128 +56(%r13)
 mtspr 0x1c,%r10
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000002000000000); .8byte (0x0000002000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
 li %r10,0
 stb %r10,2352(%r13)
 ld %r10,128 +8(%r13)
 ld %r11,128 +16(%r13)
 ld %r12,128 +24(%r13)
 ld %r13,128 +32(%r13)
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; hrfid; b hrfi_flush_fallback
 b .


.text; .balign (1 << 4); .global denorm_exception_common; .pushsection "_kprobe_blacklist","aw"; .8byte (denorm_exception_common) ; .popsection; denorm_exception_common_absolute = (denorm_exception_common - start_text + text_start); denorm_exception_common:
 GEN_COMMON denorm_exception
 addi %r3,%r1,112
 bl unknown_exception
 b interrupt_return_hsrr
# 2641 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
define_ftsec real_vectors;; exc_real_0x1600_unused_start = (0x1600); .if ((0x1600) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1600) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1600) - real_vectors_start; .global exc_real_0x1600_unused; exc_real_0x1600_unused:; .if (0x1600) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1600_unused > (0x1600) + (0x100) - exc_real_0x1600_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1600) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5600_unused_start = (0x5600); .if ((0x5600) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5600) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5600) - virt_vectors_start; .global exc_virt_0x5600_unused; exc_virt_0x5600_unused:; .if (0x5600) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5600_unused > (0x5600) + (0x100) - exc_virt_0x5600_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5600) + (0x100) - virt_vectors_start);



.macro int_define_altivec_assist name
 .L_IVEC_\name\()=0x1700



.endm ; int_define_altivec_assist altivec_assist ; do_define_int altivec_assist

define_ftsec real_vectors;; exc_real_0x1700_altivec_assist_start = (0x1700); .if ((0x1700) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1700) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1700) - real_vectors_start; .global exc_real_0x1700_altivec_assist; exc_real_0x1700_altivec_assist:
 GEN_INT_ENTRY altivec_assist, virt=0
.if (0x1700) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1700_altivec_assist > (0x1700) + (0x100) - exc_real_0x1700_altivec_assist_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1700) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5700_altivec_assist_start = (0x5700); .if ((0x5700) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5700) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5700) - virt_vectors_start; .global exc_virt_0x5700_altivec_assist; exc_virt_0x5700_altivec_assist:
 GEN_INT_ENTRY altivec_assist, virt=1
.if (0x5700) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5700_altivec_assist > (0x5700) + (0x100) - exc_virt_0x5700_altivec_assist_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5700) + (0x100) - virt_vectors_start);
.text; .balign (1 << 4); .global altivec_assist_common; .pushsection "_kprobe_blacklist","aw"; .8byte (altivec_assist_common) ; .popsection; altivec_assist_common_absolute = (altivec_assist_common - start_text + text_start); altivec_assist_common:
 GEN_COMMON altivec_assist
 addi %r3,%r1,112

 bl altivec_assist_exception
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)



 b interrupt_return_srr
# 2688 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
define_ftsec real_vectors;; exc_real_0x1800_unused_start = (0x1800); .if ((0x1800) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x1800) < real_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x1800) - real_vectors_start; .global exc_real_0x1800_unused; exc_real_0x1800_unused:; .if (0x1800) + (0x100) > real_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_real_0x1800_unused > (0x1800) + (0x100) - exc_real_0x1800_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x1800) + (0x100) - real_vectors_start);
define_ftsec virt_vectors;; exc_virt_0x5800_unused_start = (0x5800); .if ((0x5800) % (0x100) != 0); .error "Fixed section exception vector misalignment"; .endif; .if ((0x100) != 0x20) && ((0x100) != 0x80) && ((0x100) != 0x100) && ((0x100) != 0x1000); .error "Fixed section exception vector bad size"; .endif; .if (0x5800) < virt_vectors_start; .error "Fixed section underflow"; .abort; .endif; . = (0x5800) - virt_vectors_start; .global exc_virt_0x5800_unused; exc_virt_0x5800_unused:; .if (0x5800) + (0x100) > virt_vectors_end; .error "Fixed section overflow"; .abort; .endif; .if (. - exc_virt_0x5800_unused > (0x5800) + (0x100) - exc_virt_0x5800_unused_start); .error "Fixed entry overflow"; .abort; .endif; . = ((0x5800) + (0x100) - virt_vectors_start);





.macro int_define_soft_nmi name
 .L_IVEC_\name\()=0x900
 .L_ISTACK_\name\()=0
.endm ; int_define_soft_nmi soft_nmi ; do_define_int soft_nmi
# 2709 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.text; .balign (1 << 4); .global soft_nmi_common; .pushsection "_kprobe_blacklist","aw"; .8byte (soft_nmi_common) ; .popsection; soft_nmi_common_absolute = (soft_nmi_common - start_text + text_start); soft_nmi_common:
 mr %r10,%r1
 ld %r1,40(%r13)
 subi %r1,%r1,784
 __GEN_COMMON_BODY soft_nmi

 addi %r3,%r1,112
 bl soft_nmi_interrupt


 li %r9,0
 mtmsrd %r9,1

 kuap_kernel_restore %r9, %r10

 EXCEPTION_RESTORE_REGS hsrr=0
 rfid
# 2739 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
.macro MASKED_INTERRUPT hsrr=0
 .if \hsrr
masked_Hinterrupt:
 .else
masked_interrupt:
 .endif
 stw %r9,128 +52(%r13)
 lbz %r9,2355(%r13)
 or %r9,%r9,%r10
 stb %r9,2355(%r13)

 .if ! \hsrr
 cmpwi %r10,0x08
 bne 1f
 __LOAD_REG_IMMEDIATE %r9, 0x7fffffff
 mtspr 0x016,%r9

 lwz %r9,128 +52(%r13)
 b soft_nmi_common



 .endif

1: andi. %r10,%r10,(0x04|0x20)
 beq 2f
 xori %r12,%r12,(1<<(15))
 .if \hsrr
 mtspr 0x13B,%r12
 .else
 mtspr 0x01B,%r12
 .endif
 ori %r9,%r9,0x01
 stb %r9,2355(%r13)
2:
 li %r9,0
 .if \hsrr
 stb %r9,2352(%r13)
 .else
 stb %r9,2353(%r13)
 .endif

 SEARCH_RESTART_TABLE
 cmpdi %r12,0
 beq 3f
 .if \hsrr
 mtspr 0x13A,%r12
 .else
 mtspr 0x01A,%r12
 .endif
3:

 ld %r9,128 +72(%r13)
 mtctr %r9
 lwz %r9,128 +52(%r13)
 mtcrf 0x80,%r9
 std %r1,2328(%r13)
 ld %r9,128 +0(%r13)
 ld %r10,128 +8(%r13)
 ld %r11,128 +16(%r13)
 ld %r12,128 +24(%r13)
 ld %r13,128 +32(%r13)

 .if \hsrr
 hrfid
 .else
 rfid
 .endif
 b .
.endm

define_ftsec real_trampolines;; .balign (1 << 4); .global stf_barrier_fallback; stf_barrier_fallback:
 std %r9,3072 +0(%r13)
 std %r10,3072 +8(%r13)
 sync
 ld %r9,3072 +0(%r13)
 ld %r10,3072 +8(%r13)
 ori 31,31,0
 .rept 14
 b 1f
1:
 .endr
 blr


.macro L1D_DISPLACEMENT_FLUSH
 ld %r10,3152(%r13)
 ld %r11,3160(%r13)
 srdi %r11,%r11,(7 + 3)
 mtctr %r11
 lis %r11,0x60000000@h; dcbt 0,%r11,0b01010


 sync






1:
 ld %r11,(0x80 + 8)*0(%r10)
 ld %r11,(0x80 + 8)*1(%r10)
 ld %r11,(0x80 + 8)*2(%r10)
 ld %r11,(0x80 + 8)*3(%r10)
 ld %r11,(0x80 + 8)*4(%r10)
 ld %r11,(0x80 + 8)*5(%r10)
 ld %r11,(0x80 + 8)*6(%r10)
 ld %r11,(0x80 + 8)*7(%r10)
 addi %r10,%r10,0x80*8
 bdnz 1b
.endm

define_ftsec real_trampolines;; .balign (1 << 4); .global entry_flush_fallback; entry_flush_fallback:
 std %r9,3072 +0(%r13)
 std %r10,3072 +8(%r13)
 std %r11,3072 +16(%r13)
 mfctr %r9
 L1D_DISPLACEMENT_FLUSH
 mtctr %r9
 ld %r9,3072 +0(%r13)
 ld %r10,3072 +8(%r13)
 ld %r11,3072 +16(%r13)
 blr







define_ftsec real_trampolines;; .balign (1 << 4); .global scv_entry_flush_fallback; scv_entry_flush_fallback:
 li %r10,0
 mtmsrd %r10,1
 lbz %r10,2355(%r13)
 ori %r10,%r10,0x01
 stb %r10,2355(%r13)
 std %r11,3072 +16(%r13)
 L1D_DISPLACEMENT_FLUSH
 ld %r11,3072 +16(%r13)
 li %r10,(1<<(1))
 mtmsrd %r10,1
 blr

define_ftsec real_trampolines;; .balign (1 << 4); .global rfi_flush_fallback; rfi_flush_fallback:
 661:; mtspr 0x112,%r13; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mtspr 0x131,%r13; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 std %r1,3072 +24(%r13)
 ld %r1,2320(%r13)
 std %r9,3072 +0(%r13)
 std %r10,3072 +8(%r13)
 std %r11,3072 +16(%r13)
 mfctr %r9
 L1D_DISPLACEMENT_FLUSH
 mtctr %r9
 ld %r9,3072 +0(%r13)
 ld %r10,3072 +8(%r13)
 ld %r11,3072 +16(%r13)
 ld %r1,3072 +24(%r13)
 661:; mfspr %r13,0x112; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x131; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 rfid

define_ftsec real_trampolines;; .balign (1 << 4); .global hrfi_flush_fallback; hrfi_flush_fallback:
 661:; mtspr 0x112,%r13; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mtspr 0x131,%r13; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 std %r1,3072 +24(%r13)
 ld %r1,2320(%r13)
 std %r9,3072 +0(%r13)
 std %r10,3072 +8(%r13)
 std %r11,3072 +16(%r13)
 mfctr %r9
 L1D_DISPLACEMENT_FLUSH
 mtctr %r9
 ld %r9,3072 +0(%r13)
 ld %r10,3072 +8(%r13)
 ld %r11,3072 +16(%r13)
 ld %r1,3072 +24(%r13)
 661:; mfspr %r13,0x112; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x131; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 hrfid

define_ftsec real_trampolines;; .balign (1 << 4); .global rfscv_flush_fallback; rfscv_flush_fallback:

 mr %r7,%r13
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;;
 mr %r8,%r1
 ld %r1,2320(%r13)
 mfctr %r9
 ld %r10,3152(%r13)
 ld %r11,3160(%r13)
 srdi %r11,%r11,(7 + 3)
 mtctr %r11
 lis %r11,0x60000000@h; dcbt 0,%r11,0b01010


 sync






1:
 ld %r11,(0x80 + 8)*0(%r10)
 ld %r11,(0x80 + 8)*1(%r10)
 ld %r11,(0x80 + 8)*2(%r10)
 ld %r11,(0x80 + 8)*3(%r10)
 ld %r11,(0x80 + 8)*4(%r10)
 ld %r11,(0x80 + 8)*5(%r10)
 ld %r11,(0x80 + 8)*6(%r10)
 ld %r11,(0x80 + 8)*7(%r10)
 addi %r10,%r10,0x80*8
 bdnz 1b

 mtctr %r9
 li %r9,0
 li %r10,0
 li %r11,0
 mr %r1,%r8
 mr %r13,%r7
 .long 0x4c0000a4

.text


kvm_interrupt:




 b kvmppc_interrupt


.align 2 ; .type do_uaccess_flush,@function; .globl do_uaccess_flush; do_uaccess_flush:
 959: .pushsection __uaccess_flush_fixup,"a"; .align 2; 960: .8byte 959b-960b; .popsection;
 nop
 nop
 nop
 blr
 L1D_DISPLACEMENT_FLUSH
 blr
.pushsection "_kprobe_blacklist","aw"; .8byte (do_uaccess_flush) ; .popsection
___EXPORT_SYMBOL do_uaccess_flush, do_uaccess_flush,


MASKED_INTERRUPT
MASKED_INTERRUPT hsrr=1
# 3002 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
define_ftsec virt_trampolines;
# 3014 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/exceptions-64s.S"
 .align 7
 .globl __end_interrupts
__end_interrupts:
__end_interrupts_absolute = (__end_interrupts - start_virt_trampolines + virt_trampolines_start)

define_ftsec real_vectors;; . = real_vectors_len; end_real_vectors:;
define_ftsec real_trampolines;; . = real_trampolines_len; end_real_trampolines:;
define_ftsec virt_vectors;; . = virt_vectors_len; end_virt_vectors:;
define_ftsec virt_trampolines;; . = virt_trampolines_len; end_virt_trampolines:;

.text


enable_machine_check:
 mflr %r0
 bcl 20,31,$+4
0: mflr %r3
 addi %r3,%r3,(1f - 0b)
 mtspr 0x01A,%r3
 mfmsr %r3
 ori %r3,%r3,(1<<(12))
 mtspr 0x01B,%r3
 rfid
1: mtlr %r0
 blr


disable_machine_check:
 mflr %r0
 bcl 20,31,$+4
0: mflr %r3
 addi %r3,%r3,(1f - 0b)
 mtspr 0x01A,%r3
 mfmsr %r3
 li %r4,(1<<(12))
 andc %r3,%r3,%r4
 mtspr 0x01B,%r3
 rfid
1: mtlr %r0
 blr
# 209 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2




.text

# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/interrupt_64.S" 1
# 1 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/include/asm/asm-offsets.h" 1
# 2 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/interrupt_64.S" 2
# 16 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/interrupt_64.S"
 .section ".toc","aw"
SYS_CALL_TABLE:
 .tc sys_call_table[TC],sys_call_table





 .previous

 .align 7

.macro DEBUG_SRR_VALID srr
# 50 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/interrupt_64.S"
.endm


.macro system_call_vectored name trapnr
 .globl system_call_vectored_\name
system_call_vectored_\name:
.pushsection "_kprobe_blacklist","aw"; .8byte (system_call_vectored_\name) ; .popsection
 953: .pushsection __stf_entry_barrier_fixup,"a"; .align 2; 954: .8byte 953b-954b; .popsection;; nop; nop; nop; 957: .pushsection __scv_entry_flush_fixup,"a"; .align 2; 958: .8byte 957b-958b; .popsection;; nop; nop; nop;
 mr %r10,%r1
 ld %r1,2320(%r13)
 std %r10,0(%r1)
 std %r11,368(%r1)
 std %r12,376(%r1)
 std %r0,112(%r1)
 std %r10,120(%r1)
 std %r2,128(%r1)
 ld %r2,16(%r13)
 mfcr %r12
 li %r11,0

 std %r3,136(%r1)
 std %r4,144(%r1)
 std %r5,152(%r1)
 std %r6,160(%r1)
 std %r7,168(%r1)
 std %r8,176(%r1)

 std %r11,184(%r1)
 std %r11,192(%r1)
 std %r11,200(%r1)
 std %r11,208(%r1)
 std %r9,216(%r1)
 std 14,112 +8*(14)(%r1); std 14 +1,112 +8*(14 +1)(%r1); std 14 +2,112 +8*(14 +2)(%r1); std 14 +2 +1,112 +8*(14 +2 +1)(%r1); std 14 +4,112 +8*(14 +4)(%r1); std 14 +4 +1,112 +8*(14 +4 +1)(%r1); std 14 +4 +2,112 +8*(14 +4 +2)(%r1); std 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); std 22,112 +8*(22)(%r1); std 22 +1,112 +8*(22 +1)(%r1); std 22 +2,112 +8*(22 +2)(%r1); std 22 +2 +1,112 +8*(22 +2 +1)(%r1); std 22 +4,112 +8*(22 +4)(%r1); std 22 +4 +1,112 +8*(22 +4 +1)(%r1); std 22 +4 +2,112 +8*(22 +4 +2)(%r1); std 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); std 22 +8,112 +8*(22 +8)(%r1); std 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 std %r11,408(%r1)
 std %r11,400(%r1)
 std %r11,392(%r1)

 li %r11,\trapnr
 std %r11,432(%r1)
 std %r12,416(%r1)
 addi %r10,%r1,112
 ld %r11,exception_marker@toc(%r2)
 std %r11,-16(%r10)

971:
 or 2,2,2
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;
# 108 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/interrupt_64.S"
 mr %r9,%r0
 bl system_call_exception

.Lsyscall_vectored_\name\()_exit:
 addi %r4,%r1,112
 li %r5,1
 bl syscall_exit_prepare
 std %r1,2344(%r13)
.Lsyscall_vectored_\name\()_rst_start:
 lbz %r11,2355(%r13)
 andi. %r11,%r11,(~0x01)@l
 bne- syscall_vectored_\name\()_restart
 li %r11,0
 stb %r11,2354(%r13)
 li %r11,0
 stb %r11,2355(%r13) # clear out possible HARD_DIS

 ld %r2,416(%r1)
 ld %r4,368(%r1)
 ld %r5,376(%r1)

971:
 stdcx. %r0,0,%r1
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000080000000); .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

971:
 or 6,6,6 # medium low priority
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 cmpdi %r3,0
 bne .Lsyscall_vectored_\name\()_restore_regs


 mtlr %r4
 mtctr %r5




 ld %r0,112(%r1)
 ld %r4,144(%r1)
 ld %r5,152(%r1)
 ld %r6,160(%r1)
 ld %r7,168(%r1)
 ld %r8,176(%r1)

 li %r9,0
 li %r10,0
 li %r11,0
 li %r12,0
 mtspr 0x001,%r0





 mtcr %r2
 ld %r2,128(%r1)
 ld %r3,136(%r1)
 ld %r13,216(%r1)
 ld %r1,120(%r1)
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; .long 0x4c0000a4; b rfscv_flush_fallback
 b .

.Lsyscall_vectored_\name\()_restore_regs:
 mtspr 0x01A,%r4
 mtspr 0x01B,%r5

 ld %r3,392(%r1)
 ld %r4,400(%r1)
 ld %r5,408(%r1)

 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 ld %r0,112(%r1)
 mtcr %r2
 mtctr %r3
 mtlr %r4
 mtspr 0x001,%r5
 ld 2,112 +8*(2)(%r1); ld 2 +1,112 +8*(2 +1)(%r1); ld 2 +2,112 +8*(2 +2)(%r1); ld 2 +2 +1,112 +8*(2 +2 +1)(%r1); ld 2 +4,112 +8*(2 +4)(%r1); ld 2 +4 +1,112 +8*(2 +4 +1)(%r1); ld 2 +4 +2,112 +8*(2 +4 +2)(%r1); ld 2 +4 +2 +1,112 +8*(2 +4 +2 +1)(%r1); ld 2 +8,112 +8*(2 +8)(%r1); ld 2 +8 +1,112 +8*(2 +8 +1)(%r1)
 ld 12,112 +8*(12)(%r1); ld 12 +1,112 +8*(12 +1)(%r1)
 ld %r1,120(%r1)
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; rfid; b rfi_flush_fallback
.Lsyscall_vectored_\name\()_rst_end:

syscall_vectored_\name\()_restart:
.pushsection "_kprobe_blacklist","aw"; .8byte (syscall_vectored_\name\()_restart) ; .popsection
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 ld %r1,2344(%r13)
 ld %r2,16(%r13)
 ld %r3,456(%r1)
 addi %r4,%r1,112
 li %r11,(1 | 2)
 stb %r11,2354(%r13)
 bl syscall_exit_restart
 std %r1,2344(%r13)
 b .Lsyscall_vectored_\name\()_rst_start
1:

.section __soft_mask_table,"a"; .balign 8; .llong (.Lsyscall_vectored_\name\()_rst_start); .llong (1b); .previous
.section __restart_table,"a"; .balign 8; .llong (.Lsyscall_vectored_\name\()_rst_start); .llong (.Lsyscall_vectored_\name\()_rst_end); .llong (syscall_vectored_\name\()_restart); .previous

.endm

system_call_vectored common 0x3000






system_call_vectored sigill 0x7ff0





 .globl system_call_vectored_emulate
system_call_vectored_emulate:
.pushsection "_kprobe_blacklist","aw"; .8byte (system_call_vectored_emulate) ; .popsection
 li %r10,(1 | 2)
 stb %r10,2354(%r13)
 b system_call_vectored_common


 .balign (1 << 4)
 .globl system_call_common_real
system_call_common_real:
.pushsection "_kprobe_blacklist","aw"; .8byte (system_call_common_real) ; .popsection
 ld %r10,32(%r13)
 mtmsrd %r10

 .balign (1 << 4)
 .globl system_call_common
system_call_common:
.pushsection "_kprobe_blacklist","aw"; .8byte (system_call_common) ; .popsection
 mr %r10,%r1
 ld %r1,2320(%r13)
 std %r10,0(%r1)
 std %r11,368(%r1)
 std %r12,376(%r1)
 std %r0,112(%r1)
 std %r10,120(%r1)
 std %r2,128(%r1)





 ld %r2,16(%r13)
 mfcr %r12
 li %r11,0

 std %r3,136(%r1)
 std %r4,144(%r1)
 std %r5,152(%r1)
 std %r6,160(%r1)
 std %r7,168(%r1)
 std %r8,176(%r1)

 std %r11,184(%r1)
 std %r11,192(%r1)
 std %r11,200(%r1)
 std %r11,208(%r1)
 std %r9,216(%r1)
 std 14,112 +8*(14)(%r1); std 14 +1,112 +8*(14 +1)(%r1); std 14 +2,112 +8*(14 +2)(%r1); std 14 +2 +1,112 +8*(14 +2 +1)(%r1); std 14 +4,112 +8*(14 +4)(%r1); std 14 +4 +1,112 +8*(14 +4 +1)(%r1); std 14 +4 +2,112 +8*(14 +4 +2)(%r1); std 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); std 22,112 +8*(22)(%r1); std 22 +1,112 +8*(22 +1)(%r1); std 22 +2,112 +8*(22 +2)(%r1); std 22 +2 +1,112 +8*(22 +2 +1)(%r1); std 22 +4,112 +8*(22 +4)(%r1); std 22 +4 +1,112 +8*(22 +4 +1)(%r1); std 22 +4 +2,112 +8*(22 +4 +2)(%r1); std 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); std 22 +8,112 +8*(22 +8)(%r1); std 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 std %r11,408(%r1)
 std %r11,392(%r1)
 mflr %r10





 rldimi %r12,%r11,28,(63-28)
 li %r11,0xc00
 std %r10,400(%r1)
 std %r11,432(%r1)
 std %r12,416(%r1)
 addi %r10,%r1,112
 ld %r11,exception_marker@toc(%r2)
 std %r11,-16(%r10)


 li %r11,1
 stb %r11,2353(%r13)







 li %r11,(1 | 2)
 stb %r11,2354(%r13)

 li %r12,-1
 mtmsrd %r12,1





 mr %r9,%r0
 bl system_call_exception

.Lsyscall_exit:
 addi %r4,%r1,112
 li %r5,0
 bl syscall_exit_prepare
 std %r1,2344(%r13)

.Lsyscall_rst_start:
 lbz %r11,2355(%r13)
 andi. %r11,%r11,(~0x01)@l
 bne- syscall_restart

 li %r11,0
 stb %r11,2354(%r13)
 li %r11,0
 stb %r11,2355(%r13) # clear out possible HARD_DIS

 ld %r2,416(%r1)
 ld %r6,400(%r1)
 mtlr %r6


 lbz %r4,2353(%r13)
 cmpdi %r4,0
 bne 1f
 li %r4,0
 stb %r4,2353(%r13)

 ld %r4,368(%r1)
 ld %r5,376(%r1)
 mtspr 0x01A,%r4
 mtspr 0x01B,%r5
1:
 DEBUG_SRR_VALID srr

971:
 stdcx. %r0,0,%r1
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000000080000000); .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 cmpdi %r3,0
 bne .Lsyscall_restore_regs

 li %r0,0
 li %r4,0
 li %r5,0
 li %r6,0
 li %r7,0
 li %r8,0
 li %r9,0
 li %r10,0
 li %r11,0
 li %r12,0
 mtctr %r0
 mtspr 0x001,%r0
.Lsyscall_restore_regs_cont:

971:
 or 6,6,6 # medium low priority
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;





 mtcr %r2
 ld %r2,128(%r1)
 ld %r3,136(%r1)
 ld %r13,216(%r1)
 ld %r1,120(%r1)
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; rfid; b rfi_flush_fallback
 b .

.Lsyscall_restore_regs:
 ld %r3,392(%r1)
 ld %r4,408(%r1)
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 mtctr %r3
 mtspr 0x001,%r4
 ld %r0,112(%r1)
 ld 4,112 +8*(4)(%r1); ld 4 +1,112 +8*(4 +1)(%r1); ld 4 +2,112 +8*(4 +2)(%r1); ld 4 +2 +1,112 +8*(4 +2 +1)(%r1); ld 4 +4,112 +8*(4 +4)(%r1); ld 4 +4 +1,112 +8*(4 +4 +1)(%r1); ld 4 +4 +2,112 +8*(4 +4 +2)(%r1); ld 4 +4 +2 +1,112 +8*(4 +4 +2 +1)(%r1)
 ld %r12,208(%r1)
 b .Lsyscall_restore_regs_cont
.Lsyscall_rst_end:


syscall_restart:
.pushsection "_kprobe_blacklist","aw"; .8byte (syscall_restart) ; .popsection
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 ld %r1,2344(%r13)
 ld %r2,16(%r13)
 ld %r3,456(%r1)
 addi %r4,%r1,112
 li %r11,(1 | 2)
 stb %r11,2354(%r13)
 bl syscall_exit_restart
 std %r1,2344(%r13)
 b .Lsyscall_rst_start
1:

.section __soft_mask_table,"a"; .balign 8; .llong (.Lsyscall_rst_start); .llong (1b); .previous
.section __restart_table,"a"; .balign 8; .llong (.Lsyscall_rst_start); .llong (.Lsyscall_rst_end); .llong (syscall_restart); .previous






 .balign (1 << 4)
 .globl fast_interrupt_return_srr
fast_interrupt_return_srr:
.pushsection "_kprobe_blacklist","aw"; .8byte (fast_interrupt_return_srr) ; .popsection
 kuap_check_amr %r3, %r4
 ld %r5,376(%r1)
 andi. %r0,%r5,(1<<(14))

 beq 1f
 kuap_user_restore %r3, %r4
 b .Lfast_user_interrupt_return_srr
1: kuap_kernel_restore %r3, %r4
 andi. %r0,%r5,(1<<(1))
 li %r3,0
 bne+ .Lfast_kernel_interrupt_return_srr
 addi %r3,%r1,112
 bl unrecoverable_exception
 b .





.macro interrupt_return_macro srr
 .balign (1 << 4)
 .globl interrupt_return_\srr
interrupt_return_\srr\():
.pushsection "_kprobe_blacklist","aw"; .8byte (interrupt_return_\srr\()) ; .popsection
 ld %r4,376(%r1)
 andi. %r0,%r4,(1<<(14))
 beq interrupt_return_\srr\()_kernel
interrupt_return_\srr\()_user:
.pushsection "_kprobe_blacklist","aw"; .8byte (interrupt_return_\srr\()_user) ; .popsection
 addi %r3,%r1,112
 bl interrupt_exit_user_prepare
 cmpdi %r3,0
 bne- .Lrestore_nvgprs_\srr
.Lrestore_nvgprs_\srr\()_cont:
 std %r1,2344(%r13)

.Linterrupt_return_\srr\()_user_rst_start:
 lbz %r11,2355(%r13)
 andi. %r11,%r11,(~0x01)@l
 bne- interrupt_return_\srr\()_user_restart

 li %r11,0
 stb %r11,2354(%r13)
 li %r11,0
 stb %r11,2355(%r13) # clear out possible HARD_DIS

.Lfast_user_interrupt_return_\srr\():

 .ifc \srr,srr
 lbz %r4,2353(%r13)
 .else
 lbz %r4,2352(%r13)
 .endif
 cmpdi %r4,0
 li %r4,0
 bne 1f

 ld %r11,368(%r1)
 ld %r12,376(%r1)
 .ifc \srr,srr
 mtspr 0x01A,%r11
 mtspr 0x01B,%r12
1:

 stb %r4,2353(%r13)

 .else
 mtspr 0x13A,%r11
 mtspr 0x13B,%r12
1:

 stb %r4,2352(%r13)

 .endif
 DEBUG_SRR_VALID \srr






971:
 ld %r10,464(%r1)
 mtspr 0x380,%r10
972: .pushsection __ftr_alt_97,"a"; .align 2; 973: 974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte (0x0000004000000000); .8byte (0x0000004000000000); .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

971:
 stdcx. %r0,0,%r1
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 ldarx %r0,0,%r1
974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000080000000; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 ld %r3,416(%r1)
 ld %r4,400(%r1)
 ld %r5,392(%r1)
 ld %r6,408(%r1)
 li %r0,0

 ld 7,112 +8*(7)(%r1); ld 7 +1,112 +8*(7 +1)(%r1); ld 7 +2,112 +8*(7 +2)(%r1); ld 7 +2 +1,112 +8*(7 +2 +1)(%r1)
 ld 11,112 +8*(11)(%r1); ld 11 +1,112 +8*(11 +1)(%r1)
 ld 13,112 +8*(13)(%r1)

 mtcr %r3
 mtlr %r4
 mtctr %r5
 mtspr 0x001,%r6

 ld 2,112 +8*(2)(%r1); ld 2 +1,112 +8*(2 +1)(%r1); ld 2 +2,112 +8*(2 +2)(%r1); ld 2 +2 +1,112 +8*(2 +2 +1)(%r1)
 ld 6,112 +8*(6)(%r1)
 ld 0,112 +8*(0)(%r1)
 ld 1,112 +8*(1)(%r1)
 .ifc \srr,srr
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; rfid; b rfi_flush_fallback
 .else
 955: .pushsection __stf_exit_barrier_fixup,"a"; .align 2; 956: .8byte 955b-956b; .popsection;; nop; nop; nop; nop; nop; nop; 951: .pushsection __rfi_flush_fixup,"a"; .align 2; 952: .8byte 951b-952b; .popsection;; nop; nop; nop; hrfid; b hrfi_flush_fallback
 .endif
 b .
.Linterrupt_return_\srr\()_user_rst_end:

.Lrestore_nvgprs_\srr\():
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 b .Lrestore_nvgprs_\srr\()_cont


interrupt_return_\srr\()_user_restart:
.pushsection "_kprobe_blacklist","aw"; .8byte (interrupt_return_\srr\()_user_restart) ; .popsection
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 ld %r1,2344(%r13)
 ld %r2,16(%r13)
 addi %r3,%r1,112
 li %r11,(1 | 2)
 stb %r11,2354(%r13)
 bl interrupt_exit_user_restart
 std %r1,2344(%r13)
 b .Linterrupt_return_\srr\()_user_rst_start
1:

.section __soft_mask_table,"a"; .balign 8; .llong (.Linterrupt_return_\srr\()_user_rst_start); .llong (1b); .previous
.section __restart_table,"a"; .balign 8; .llong (.Linterrupt_return_\srr\()_user_rst_start); .llong (.Linterrupt_return_\srr\()_user_rst_end); .llong (interrupt_return_\srr\()_user_restart); .previous


 .balign (1 << 4)
interrupt_return_\srr\()_kernel:
.pushsection "_kprobe_blacklist","aw"; .8byte (interrupt_return_\srr\()_kernel) ; .popsection
 addi %r3,%r1,112
 bl interrupt_exit_kernel_prepare

 std %r1,2344(%r13)
.Linterrupt_return_\srr\()_kernel_rst_start:
 ld %r11,424(%r1)
 cmpwi %r11,0
 stb %r11,2354(%r13)
 bne 1f

 lbz %r11,2355(%r13)
 andi. %r11,%r11,(~0x01)@l
 bne- interrupt_return_\srr\()_kernel_restart

 li %r11,0
 stb %r11,2355(%r13) # clear out possible HARD_DIS
1:

.Lfast_kernel_interrupt_return_\srr\():
 cmpdi 1,%r3,0

 .ifc \srr,srr
 lbz %r4,2353(%r13)
 .else
 lbz %r4,2352(%r13)
 .endif
 cmpdi %r4,0
 li %r4,0
 bne 1f

 ld %r11,368(%r1)
 ld %r12,376(%r1)
 .ifc \srr,srr
 mtspr 0x01A,%r11
 mtspr 0x01B,%r12
1:

 stb %r4,2353(%r13)

 .else
 mtspr 0x13A,%r11
 mtspr 0x13B,%r12
1:

 stb %r4,2352(%r13)

 .endif
 DEBUG_SRR_VALID \srr

971:
 stdcx. %r0,0,%r1
972: .pushsection __ftr_alt_97,"a"; .align 2; 973:
 ldarx %r0,0,%r1
974: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 975: .8byte 0x0000000080000000; .8byte 0; .8byte 971b -975b; .8byte 972b -975b; .8byte 973b -975b; .8byte 974b -975b; .org . + (((974b -973b)) > ((972b -971b)));; .popsection;

 ld %r3,400(%r1)
 ld %r4,392(%r1)
 ld %r5,408(%r1)
 ld %r6,416(%r1)
 li %r0,0

 ld 7,112 +8*(7)(%r1); ld 7 +1,112 +8*(7 +1)(%r1); ld 7 +2,112 +8*(7 +2)(%r1); ld 7 +2 +1,112 +8*(7 +2 +1)(%r1)
 ld 11,112 +8*(11)(%r1); ld 11 +1,112 +8*(11 +1)(%r1)

 mtlr %r3
 mtctr %r4
 mtspr 0x001,%r5





 std %r0,112 -16(%r1)

 ld 2,112 +8*(2)(%r1); ld 2 +1,112 +8*(2 +1)(%r1); ld 2 +2,112 +8*(2 +2)(%r1); ld 2 +2 +1,112 +8*(2 +2 +1)(%r1)

 bne- 1,1f
 mtcr %r6
 ld 6,112 +8*(6)(%r1)
 ld 0,112 +8*(0)(%r1)
 ld 1,112 +8*(1)(%r1)
 .ifc \srr,srr
 rfid
 .else
 hrfid
 .endif
 b .

1:







 mtcr %r6
 std %r9,128 +0(%r13)
 addi %r9,%r1,784
 ld 6,112 +8*(6)(%r1)
 ld 0,112 +8*(0)(%r1)
 ld 1,112 +8*(1)(%r1)
 std %r9,0(%r1)
 ld %r9,128 +0(%r13)

 .ifc \srr,srr
 rfid
 .else
 hrfid
 .endif
 b .
.Linterrupt_return_\srr\()_kernel_rst_end:


interrupt_return_\srr\()_kernel_restart:
.pushsection "_kprobe_blacklist","aw"; .8byte (interrupt_return_\srr\()_kernel_restart) ; .popsection
 661:; mfspr %r13,0x111; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mfspr %r13,0x130; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;
 ld %r1,2344(%r13)
 ld %r2,16(%r13)
 addi %r3,%r1,112
 li %r11,(1 | 2)
 stb %r11,2354(%r13)
 bl interrupt_exit_kernel_restart
 std %r1,2344(%r13)
 b .Linterrupt_return_\srr\()_kernel_rst_start
1:

.section __soft_mask_table,"a"; .balign 8; .llong (.Linterrupt_return_\srr\()_kernel_rst_start); .llong (1b); .previous
.section __restart_table,"a"; .balign 8; .llong (.Linterrupt_return_\srr\()_kernel_rst_start); .llong (.Linterrupt_return_\srr\()_kernel_rst_end); .llong (interrupt_return_\srr\()_kernel_restart); .previous


.endm

interrupt_return_macro srr

interrupt_return_macro hsrr

 .globl __end_soft_masked
__end_soft_masked:
__end_soft_masked_absolute = (__end_soft_masked - start_text + text_start)



.align 2 ; .type ret_from_fork_scv,@function; .globl ret_from_fork_scv; ret_from_fork_scv:
 bl schedule_tail
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 li %r3,0
 b .Lsyscall_vectored_common_exit


.align 2 ; .type ret_from_fork,@function; .globl ret_from_fork; ret_from_fork:
 bl schedule_tail
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 li %r3,0
 b .Lsyscall_exit

.align 2 ; .type ret_from_kernel_thread,@function; .globl ret_from_kernel_thread; ret_from_kernel_thread:
 bl schedule_tail
 ld 14,112 +8*(14)(%r1); ld 14 +1,112 +8*(14 +1)(%r1); ld 14 +2,112 +8*(14 +2)(%r1); ld 14 +2 +1,112 +8*(14 +2 +1)(%r1); ld 14 +4,112 +8*(14 +4)(%r1); ld 14 +4 +1,112 +8*(14 +4 +1)(%r1); ld 14 +4 +2,112 +8*(14 +4 +2)(%r1); ld 14 +4 +2 +1,112 +8*(14 +4 +2 +1)(%r1); ld 22,112 +8*(22)(%r1); ld 22 +1,112 +8*(22 +1)(%r1); ld 22 +2,112 +8*(22 +2)(%r1); ld 22 +2 +1,112 +8*(22 +2 +1)(%r1); ld 22 +4,112 +8*(22 +4)(%r1); ld 22 +4 +1,112 +8*(22 +4 +1)(%r1); ld 22 +4 +2,112 +8*(22 +4 +2)(%r1); ld 22 +4 +2 +1,112 +8*(22 +4 +2 +1)(%r1); ld 22 +8,112 +8*(22 +8)(%r1); ld 22 +8 +1,112 +8*(22 +8 +1)(%r1)
 mtctr %r14
 mr %r3,%r15

 mr %r12,%r14

 bctrl
 li %r3,0
 b .Lsyscall_exit
# 216 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S" 2
# 336 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
.align 2 ; .type generic_secondary_smp_init,@function; .globl generic_secondary_smp_init; generic_secondary_smp_init:
 tdi 0,0,0x48; b 191f; .long 0xa600607d; .long 0x01006b69; .long 0x00004039; .long 0x6401417d; .long 0x05009f42; .long 0xa602487d; .long 0x14004a39; .long 0xa6035a7d; .long 0xa6037b7d; .long 0x2400004c; 191:
 mr %r24,%r3
 mr %r25,%r4


 bl enable_64b_mode


 bl relative_toc
 rotldi %r2,%r2,16; ori %r2,%r2,((0xc000000000000000>>48)&0xFFFF); rotldi %r2,%r2,48
# 393 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
generic_secondary_common_init:







 ld %r8,paca_ptrs@got(%r2)
 ld %r8,0(%r8)
 ld %r7,nr_cpu_ids@got(%r2)
 lwz %r7,0(%r7)
 li %r5,0
1:
 sldi %r9,%r5,3
 ldx %r13,%r9,%r8
 lhz %r6,56(%r13)
 cmpw %r6,%r24
 beq 2f
 addi %r5,%r5,1
 cmpw %r5,%r7
 blt 1b

 mr %r3,%r24
 b kexec_wait

2: 661:; mtspr 0x111,%r13; 662: .pushsection __ftr_alt_66,"a"; .align 2; 663:; mtspr 0x130,%r13; 664: .popsection; .pushsection __ftr_fixup,"a"; .align 3; 665: .8byte 0x0000000000002000; .8byte 0; .8byte 661b -665b; .8byte 662b -665b; .8byte 663b -665b; .8byte 664b -665b; .org . + (((664b -663b)) > ((662b -661b)));; .popsection;






 mr %r24,%r5


 ld %r1,40(%r13)
 subi %r1,%r1,112


 ld %r23,cur_cpu_spec@got(%r2)
 ld %r23,0(%r23)
 ld %r12,72(%r23)
 cmpdi 0,%r12,0
 beq 3f



 mtctr %r12
 bctrl

3: ld %r3,spinning_secondaries@got(%r2)
 lwarx %r4,0,%r3
 subi %r4,%r4,1
 stwcx. %r4,0,%r3
 bne 3b
 isync

4: or 1,1,1
 lbz %r23,58(%r13)

 cmpwi 0,%r23,0
 beq 4b

 sync
 isync

 b __secondary_start







__mmu_off:
 mfmsr %r3
 andi. %r0,%r3,(1<<(5))|(1<<(4))
 beqlr
 mflr %r4
 andc %r3,%r3,%r0
 mtspr 0x01A,%r4
 mtspr 0x01B,%r3
 sync
 rfid
 b .
# 493 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
__start_initialization_multiplatform:

 bl enable_64b_mode


 bl relative_toc


 bcl 20,31,$+4
0: mflr %r26
 addis %r26,%r26,(_stext - 0b)@ha
 addi %r26,%r26,(_stext - 0b)@l




 cmpldi 0,%r5,0
 beq 1f
 b __boot_from_prom
1:

 mr %r31,%r3
 mr %r30,%r4
# 527 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 mfspr %r0,0x11F
 srwi %r0,%r0,16
 cmpwi %r0,0x39
 beq 1f
 cmpwi %r0,0x3c
 beq 1f
 cmpwi %r0,0x44
 beq 1f
 cmpwi %r0,0x45
 bne 2f
1: bl __cpu_preinit_ppc970
2:


 bl __mmu_off
 b __after_prom_start


.section ".ref.text", "ax"
__boot_from_prom:


 mr %r31,%r3
 mr %r30,%r4
 mr %r29,%r5
 mr %r28,%r6
 mr %r27,%r7






 rldicr %r1,%r1,0,59



 mr %r3,%r26
 bl relocate



 mr %r3,%r31
 mr %r4,%r30
 mr %r5,%r29
 mr %r6,%r28
 mr %r7,%r27


 mr %r8,%r26
 bl prom_init




 trap
 .previous

__after_prom_start:


 lis %r25,0xc000000000000000@highest
 sldi %r25,%r25,32



 lwz %r7,((__run_at_load_absolute))(%r26)



 cmplwi 0,%r7,1
 bne 1f
 add %r25,%r25,%r26
1: mr %r3,%r25
 bl relocate
# 615 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 li %r3,0



 mr. %r4,%r26



 beq 9f
 li %r6,0x100
# 636 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 lwz %r7,((__run_at_load_absolute))(%r26)
 cmplwi 0,%r7,1
 bne 3f







 lis %r11, ((__end_interrupts_absolute))@highest; lis %r5, ((__end_interrupts_absolute))@high; ori %r11, %r11, ((__end_interrupts_absolute))@higher; ori %r5, %r5, ((__end_interrupts_absolute))@l; rldimi %r5, %r11, 32, 0

 b 5f
3:


 lis %r5,((copy_to_here - start_text + text_start))@ha
 addi %r5,%r5,((copy_to_here - start_text + text_start))@l

 bl copy_and_flush



 addis %r8,%r3,((4f - start_text + text_start))@ha
 addi %r12,%r8,((4f - start_text + text_start))@l
 mtctr %r12
 bctr

.balign 8
p_end: .8byte _end - copy_to_here

4:




 addis %r8,%r26,((p_end - start_text + text_start))@ha
 ld %r8,((p_end - start_text + text_start))@l(%r8)
 add %r5,%r5,%r8
5: bl copy_and_flush

9: b start_here_multiplatform
# 687 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
.align 2 ; .type copy_and_flush,@function; .globl copy_and_flush; copy_and_flush:
 addi %r5,%r5,-8
 addi %r6,%r6,-8
4: li %r0,8
# 699 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 mtctr %r0
3: addi %r6,%r6,8
 ldx %r0,%r6,%r4
 stdx %r0,%r6,%r3
 bdnz 3b
 dcbst %r6,%r3
 sync
 icbi %r6,%r3
 cmpld 0,%r6,%r5
 blt 4b
 sync
 addi %r5,%r5,8
 addi %r6,%r6,8
 isync
 blr

.pushsection "_kprobe_blacklist","aw"; .8byte (copy_and_flush) ; .popsection;

.align 8
copy_to_here:
# 802 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 .section ".text";
 .align 2 ;

 .globl __secondary_start
__secondary_start:

 or 2,2,2






 bl early_setup_secondary






 ld %r1, 2320(%r13)


 li %r7,0
 mtlr %r7




 li %r7,1
 stb %r7,2354(%r13)
 li %r0,0x01
 stb %r0,2355(%r13)


 ld %r3,start_secondary_prolog@got(%r2)
 __LOAD_REG_IMMEDIATE %r4, ((((1<<(12)) | (1<<(1)) | (1<<(5)) | (1<<(4)) | (1<<(60))) | (1<<(0))) | (1<<(63)))

 mtspr 0x01A,%r3
 mtspr 0x01B,%r4
 rfid
 b .






start_secondary_prolog:
 ld %r2,16(%r13)
 li %r3,0
 std %r3,0(%r1)
 bl start_secondary
 b .





.align 2 ; .type start_secondary_resume,@function; .globl start_secondary_resume; start_secondary_resume:
 ld %r1,2320(%r13)
 li %r3,0
 std %r3,0(%r1)
 bl start_secondary
 b .





enable_64b_mode:
 mfmsr %r11




 __LOAD_REG_IMMEDIATE %r12, (1<<(63))
 or %r11,%r11,%r12
 mtmsrd %r11
 isync

 blr
# 897 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
.align 2 ; .type relative_toc,@function; .globl relative_toc; relative_toc:
 mflr %r0
 bcl 20,31,$+4
0: mflr %r11
 ld %r2,(p_toc - 0b)(%r11)
 add %r2,%r2,%r11
 mtlr %r0
 blr

.balign 8
p_toc: .8byte .TOC. - 0b




.section ".ref.text", "ax"
start_here_multiplatform:

 bl relative_toc
 rotldi %r2,%r2,16; ori %r2,%r2,((0xc000000000000000>>48)&0xFFFF); rotldi %r2,%r2,48






 ld %r11,__bss_stop@got(%r2)
 ld %r8,__bss_start@got(%r2)
 sub %r11,%r11,%r8
 addi %r11,%r11,7
 srdi. %r11,%r11,3
 beq 4f
 addi %r8,%r8,-8
 li %r0,0
 mtctr %r11
3: stdu %r0,8(%r8)
 bdnz 3b
4:
# 944 "/home/aik/p/kernels-llvm/llvm/arch/powerpc/kernel/head_64.S"
 mfmsr %r6
 ori %r6,%r6,(1<<(1))
 mtmsrd %r6




 ld %r4,kernstart_addr@got(%r2)
 clrldi %r0,%r25,2
 std %r0,0(%r4)



 ld %r3,init_thread_union@got(%r2)
 __LOAD_REG_IMMEDIATE %r1, (1 << 14)
 add %r1,%r3,%r1
 li %r0,0
 stdu %r0,-112(%r1)







 mr %r3,%r31
 ld %r12,early_setup@got(%r2)
 mtctr %r12
 bctrl

 ld %r3,start_here_common@got(%r2)
 ld %r4,32(%r13)
 mtspr 0x01A,%r3
 mtspr 0x01B,%r4
 rfid
 b .



start_here_common:

 std %r1,2320(%r13)


 ld %r2,16(%r13)




 li %r0,1
 stb %r0,2354(%r13)
 li %r0,0x01
 stb %r0,2355(%r13)


 bl start_kernel


0: trap
 EMIT_BUG_ENTRY 0b, "arch/powerpc/kernel/head_64.S", 1003, 0
 .previous
